# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_flog_ofp_v1_0', [dirname(__file__)])
        except ImportError:
            import _flog_ofp_v1_0
            return _flog_ofp_v1_0
        if fp is not None:
            try:
                _mod = imp.load_module('_flog_ofp_v1_0', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _flog_ofp_v1_0 = swig_import_helper()
    del swig_import_helper
else:
    import _flog_ofp_v1_0
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Buffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Buffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _flog_ofp_v1_0.new_Buffer(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return _flog_ofp_v1_0.Buffer_size(self)
    def __len__(self): return _flog_ofp_v1_0.Buffer___len__(self)
    def __getitem__(self, *args): return _flog_ofp_v1_0.Buffer___getitem__(self, *args)
    __swig_destroy__ = _flog_ofp_v1_0.delete_Buffer
    __del__ = lambda self : None;
Buffer_swigregister = _flog_ofp_v1_0.Buffer_swigregister
Buffer_swigregister(Buffer)

class Greedy_buffer(Buffer):
    __swig_setmethods__ = {}
    for _s in [Buffer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Greedy_buffer, name, value)
    __swig_getmethods__ = {}
    for _s in [Buffer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Greedy_buffer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Greedy_buffer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Greedy_buffer
    __del__ = lambda self : None;
Greedy_buffer_swigregister = _flog_ofp_v1_0.Greedy_buffer_swigregister
Greedy_buffer_swigregister(Greedy_buffer)


def buffer_from_file(*args):
  return _flog_ofp_v1_0.buffer_from_file(*args)
buffer_from_file = _flog_ofp_v1_0.buffer_from_file

def buffer_to_file(*args):
  return _flog_ofp_v1_0.buffer_to_file(*args)
buffer_to_file = _flog_ofp_v1_0.buffer_to_file
class Buffer_view(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Buffer_view, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Buffer_view, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _flog_ofp_v1_0.new_Buffer_view(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Buffer_view
    __del__ = lambda self : None;
Buffer_view_swigregister = _flog_ofp_v1_0.Buffer_view_swigregister
Buffer_view_swigregister(Buffer_view)

class Formatter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Formatter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Formatter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Formatter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Formatter
    __del__ = lambda self : None;
Formatter_swigregister = _flog_ofp_v1_0.Formatter_swigregister
Formatter_swigregister(Formatter)

class Ethernet_addr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ethernet_addr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ethernet_addr, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Ethernet_addr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Ethernet_addr
    __del__ = lambda self : None;
Ethernet_addr_swigregister = _flog_ofp_v1_0.Ethernet_addr_swigregister
Ethernet_addr_swigregister(Ethernet_addr)

class Ipv4_addr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ipv4_addr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ipv4_addr, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Ipv4_addr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Ipv4_addr
    __del__ = lambda self : None;
Ipv4_addr_swigregister = _flog_ofp_v1_0.Ipv4_addr_swigregister
Ipv4_addr_swigregister(Ipv4_addr)

class Error_condition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error_condition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Error_condition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["code"] = _flog_ofp_v1_0.Error_condition_code_set
    __swig_getmethods__["code"] = _flog_ofp_v1_0.Error_condition_code_get
    if _newclass:code = _swig_property(_flog_ofp_v1_0.Error_condition_code_get, _flog_ofp_v1_0.Error_condition_code_set)
    def __nonzero__(self):
      return self.code == 0;

    def __init__(self): 
        this = _flog_ofp_v1_0.new_Error_condition()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Error_condition
    __del__ = lambda self : None;
Error_condition_swigregister = _flog_ofp_v1_0.Error_condition_swigregister
Error_condition_swigregister(Error_condition)

class Match(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Match, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Match, name)
    __repr__ = _swig_repr
    IN_PORT = _flog_ofp_v1_0.Match_IN_PORT
    DL_VLAN = _flog_ofp_v1_0.Match_DL_VLAN
    DL_SRC = _flog_ofp_v1_0.Match_DL_SRC
    DL_DST = _flog_ofp_v1_0.Match_DL_DST
    DL_TYPE = _flog_ofp_v1_0.Match_DL_TYPE
    NW_PROTO = _flog_ofp_v1_0.Match_NW_PROTO
    TP_SRC = _flog_ofp_v1_0.Match_TP_SRC
    TP_DST = _flog_ofp_v1_0.Match_TP_DST
    NW_SRC = _flog_ofp_v1_0.Match_NW_SRC
    NW_DST = _flog_ofp_v1_0.Match_NW_DST
    DL_VLAN_PCP = _flog_ofp_v1_0.Match_DL_VLAN_PCP
    NW_TOS = _flog_ofp_v1_0.Match_NW_TOS
    ALL = _flog_ofp_v1_0.Match_ALL
    __swig_setmethods__["wildcards"] = _flog_ofp_v1_0.Match_wildcards_set
    __swig_getmethods__["wildcards"] = _flog_ofp_v1_0.Match_wildcards_get
    if _newclass:wildcards = _swig_property(_flog_ofp_v1_0.Match_wildcards_get, _flog_ofp_v1_0.Match_wildcards_set)
    __swig_setmethods__["in_port"] = _flog_ofp_v1_0.Match_in_port_set
    __swig_getmethods__["in_port"] = _flog_ofp_v1_0.Match_in_port_get
    if _newclass:in_port = _swig_property(_flog_ofp_v1_0.Match_in_port_get, _flog_ofp_v1_0.Match_in_port_set)
    __swig_setmethods__["dl_src"] = _flog_ofp_v1_0.Match_dl_src_set
    __swig_getmethods__["dl_src"] = _flog_ofp_v1_0.Match_dl_src_get
    if _newclass:dl_src = _swig_property(_flog_ofp_v1_0.Match_dl_src_get, _flog_ofp_v1_0.Match_dl_src_set)
    __swig_setmethods__["dl_dst"] = _flog_ofp_v1_0.Match_dl_dst_set
    __swig_getmethods__["dl_dst"] = _flog_ofp_v1_0.Match_dl_dst_get
    if _newclass:dl_dst = _swig_property(_flog_ofp_v1_0.Match_dl_dst_get, _flog_ofp_v1_0.Match_dl_dst_set)
    __swig_setmethods__["dl_vlan"] = _flog_ofp_v1_0.Match_dl_vlan_set
    __swig_getmethods__["dl_vlan"] = _flog_ofp_v1_0.Match_dl_vlan_get
    if _newclass:dl_vlan = _swig_property(_flog_ofp_v1_0.Match_dl_vlan_get, _flog_ofp_v1_0.Match_dl_vlan_set)
    __swig_setmethods__["dl_pcp"] = _flog_ofp_v1_0.Match_dl_pcp_set
    __swig_getmethods__["dl_pcp"] = _flog_ofp_v1_0.Match_dl_pcp_get
    if _newclass:dl_pcp = _swig_property(_flog_ofp_v1_0.Match_dl_pcp_get, _flog_ofp_v1_0.Match_dl_pcp_set)
    __swig_setmethods__["dl_type"] = _flog_ofp_v1_0.Match_dl_type_set
    __swig_getmethods__["dl_type"] = _flog_ofp_v1_0.Match_dl_type_get
    if _newclass:dl_type = _swig_property(_flog_ofp_v1_0.Match_dl_type_get, _flog_ofp_v1_0.Match_dl_type_set)
    __swig_setmethods__["nw_tos"] = _flog_ofp_v1_0.Match_nw_tos_set
    __swig_getmethods__["nw_tos"] = _flog_ofp_v1_0.Match_nw_tos_get
    if _newclass:nw_tos = _swig_property(_flog_ofp_v1_0.Match_nw_tos_get, _flog_ofp_v1_0.Match_nw_tos_set)
    __swig_setmethods__["nw_proto"] = _flog_ofp_v1_0.Match_nw_proto_set
    __swig_getmethods__["nw_proto"] = _flog_ofp_v1_0.Match_nw_proto_get
    if _newclass:nw_proto = _swig_property(_flog_ofp_v1_0.Match_nw_proto_get, _flog_ofp_v1_0.Match_nw_proto_set)
    __swig_setmethods__["nw_src"] = _flog_ofp_v1_0.Match_nw_src_set
    __swig_getmethods__["nw_src"] = _flog_ofp_v1_0.Match_nw_src_get
    if _newclass:nw_src = _swig_property(_flog_ofp_v1_0.Match_nw_src_get, _flog_ofp_v1_0.Match_nw_src_set)
    __swig_setmethods__["nw_dst"] = _flog_ofp_v1_0.Match_nw_dst_set
    __swig_getmethods__["nw_dst"] = _flog_ofp_v1_0.Match_nw_dst_get
    if _newclass:nw_dst = _swig_property(_flog_ofp_v1_0.Match_nw_dst_get, _flog_ofp_v1_0.Match_nw_dst_set)
    __swig_setmethods__["tp_src"] = _flog_ofp_v1_0.Match_tp_src_set
    __swig_getmethods__["tp_src"] = _flog_ofp_v1_0.Match_tp_src_get
    if _newclass:tp_src = _swig_property(_flog_ofp_v1_0.Match_tp_src_get, _flog_ofp_v1_0.Match_tp_src_set)
    __swig_setmethods__["tp_dst"] = _flog_ofp_v1_0.Match_tp_dst_set
    __swig_getmethods__["tp_dst"] = _flog_ofp_v1_0.Match_tp_dst_get
    if _newclass:tp_dst = _swig_property(_flog_ofp_v1_0.Match_tp_dst_get, _flog_ofp_v1_0.Match_tp_dst_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Match()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Match
    __del__ = lambda self : None;
Match_swigregister = _flog_ofp_v1_0.Match_swigregister
Match_swigregister(Match)

class Port(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Port, name)
    __repr__ = _swig_repr
    MAX = _flog_ofp_v1_0.Port_MAX
    IN_PORT = _flog_ofp_v1_0.Port_IN_PORT
    TABLE = _flog_ofp_v1_0.Port_TABLE
    NORMAL = _flog_ofp_v1_0.Port_NORMAL
    FLOOD = _flog_ofp_v1_0.Port_FLOOD
    ALL = _flog_ofp_v1_0.Port_ALL
    CONTROLLER = _flog_ofp_v1_0.Port_CONTROLLER
    LOCAL = _flog_ofp_v1_0.Port_LOCAL
    NONE = _flog_ofp_v1_0.Port_NONE
    PORT_DOWN = _flog_ofp_v1_0.Port_PORT_DOWN
    NO_STP = _flog_ofp_v1_0.Port_NO_STP
    NO_RECV = _flog_ofp_v1_0.Port_NO_RECV
    NO_RECV_STP = _flog_ofp_v1_0.Port_NO_RECV_STP
    NO_FLOOD = _flog_ofp_v1_0.Port_NO_FLOOD
    NO_FWD = _flog_ofp_v1_0.Port_NO_FWD
    NO_PACKET_IN = _flog_ofp_v1_0.Port_NO_PACKET_IN
    STP_LISTEN = _flog_ofp_v1_0.Port_STP_LISTEN
    LINK_DOWN = _flog_ofp_v1_0.Port_LINK_DOWN
    STP_LEARN = _flog_ofp_v1_0.Port_STP_LEARN
    STP_FORWARD = _flog_ofp_v1_0.Port_STP_FORWARD
    STP_BLOCK = _flog_ofp_v1_0.Port_STP_BLOCK
    STP_MASK = _flog_ofp_v1_0.Port_STP_MASK
    TEN_MB_HD = _flog_ofp_v1_0.Port_TEN_MB_HD
    TEN_MB_FD = _flog_ofp_v1_0.Port_TEN_MB_FD
    HUNDRED_MB_HD = _flog_ofp_v1_0.Port_HUNDRED_MB_HD
    HUNDRED_MB_FD = _flog_ofp_v1_0.Port_HUNDRED_MB_FD
    ONE_GB_HD = _flog_ofp_v1_0.Port_ONE_GB_HD
    ONE_GB_FD = _flog_ofp_v1_0.Port_ONE_GB_FD
    TEN_GB_FD = _flog_ofp_v1_0.Port_TEN_GB_FD
    COPPER = _flog_ofp_v1_0.Port_COPPER
    FIBER = _flog_ofp_v1_0.Port_FIBER
    AUTO_NEG = _flog_ofp_v1_0.Port_AUTO_NEG
    PAUSE = _flog_ofp_v1_0.Port_PAUSE
    PAUSE_ASYM = _flog_ofp_v1_0.Port_PAUSE_ASYM
    __swig_setmethods__["port_id"] = _flog_ofp_v1_0.Port_port_id_set
    __swig_getmethods__["port_id"] = _flog_ofp_v1_0.Port_port_id_get
    if _newclass:port_id = _swig_property(_flog_ofp_v1_0.Port_port_id_get, _flog_ofp_v1_0.Port_port_id_set)
    __swig_setmethods__["hw_addr"] = _flog_ofp_v1_0.Port_hw_addr_set
    __swig_getmethods__["hw_addr"] = _flog_ofp_v1_0.Port_hw_addr_get
    if _newclass:hw_addr = _swig_property(_flog_ofp_v1_0.Port_hw_addr_get, _flog_ofp_v1_0.Port_hw_addr_set)
    __swig_setmethods__["name"] = _flog_ofp_v1_0.Port_name_set
    __swig_getmethods__["name"] = _flog_ofp_v1_0.Port_name_get
    if _newclass:name = _swig_property(_flog_ofp_v1_0.Port_name_get, _flog_ofp_v1_0.Port_name_set)
    __swig_setmethods__["config"] = _flog_ofp_v1_0.Port_config_set
    __swig_getmethods__["config"] = _flog_ofp_v1_0.Port_config_get
    if _newclass:config = _swig_property(_flog_ofp_v1_0.Port_config_get, _flog_ofp_v1_0.Port_config_set)
    __swig_setmethods__["state"] = _flog_ofp_v1_0.Port_state_set
    __swig_getmethods__["state"] = _flog_ofp_v1_0.Port_state_get
    if _newclass:state = _swig_property(_flog_ofp_v1_0.Port_state_get, _flog_ofp_v1_0.Port_state_set)
    __swig_setmethods__["current"] = _flog_ofp_v1_0.Port_current_set
    __swig_getmethods__["current"] = _flog_ofp_v1_0.Port_current_get
    if _newclass:current = _swig_property(_flog_ofp_v1_0.Port_current_get, _flog_ofp_v1_0.Port_current_set)
    __swig_setmethods__["advertised"] = _flog_ofp_v1_0.Port_advertised_set
    __swig_getmethods__["advertised"] = _flog_ofp_v1_0.Port_advertised_get
    if _newclass:advertised = _swig_property(_flog_ofp_v1_0.Port_advertised_get, _flog_ofp_v1_0.Port_advertised_set)
    __swig_setmethods__["supported"] = _flog_ofp_v1_0.Port_supported_set
    __swig_getmethods__["supported"] = _flog_ofp_v1_0.Port_supported_get
    if _newclass:supported = _swig_property(_flog_ofp_v1_0.Port_supported_get, _flog_ofp_v1_0.Port_supported_set)
    __swig_setmethods__["peer"] = _flog_ofp_v1_0.Port_peer_set
    __swig_getmethods__["peer"] = _flog_ofp_v1_0.Port_peer_get
    if _newclass:peer = _swig_property(_flog_ofp_v1_0.Port_peer_get, _flog_ofp_v1_0.Port_peer_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Port()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Port
    __del__ = lambda self : None;
Port_swigregister = _flog_ofp_v1_0.Port_swigregister
Port_swigregister(Port)

class Action_output(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action_output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action_output, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port"] = _flog_ofp_v1_0.Action_output_port_set
    __swig_getmethods__["port"] = _flog_ofp_v1_0.Action_output_port_get
    if _newclass:port = _swig_property(_flog_ofp_v1_0.Action_output_port_get, _flog_ofp_v1_0.Action_output_port_set)
    __swig_setmethods__["max_len"] = _flog_ofp_v1_0.Action_output_max_len_set
    __swig_getmethods__["max_len"] = _flog_ofp_v1_0.Action_output_max_len_get
    if _newclass:max_len = _swig_property(_flog_ofp_v1_0.Action_output_max_len_get, _flog_ofp_v1_0.Action_output_max_len_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action_output()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action_output
    __del__ = lambda self : None;
Action_output_swigregister = _flog_ofp_v1_0.Action_output_swigregister
Action_output_swigregister(Action_output)

class Action_set_vlan_vid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action_set_vlan_vid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action_set_vlan_vid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vlan_vid"] = _flog_ofp_v1_0.Action_set_vlan_vid_vlan_vid_set
    __swig_getmethods__["vlan_vid"] = _flog_ofp_v1_0.Action_set_vlan_vid_vlan_vid_get
    if _newclass:vlan_vid = _swig_property(_flog_ofp_v1_0.Action_set_vlan_vid_vlan_vid_get, _flog_ofp_v1_0.Action_set_vlan_vid_vlan_vid_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action_set_vlan_vid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action_set_vlan_vid
    __del__ = lambda self : None;
Action_set_vlan_vid_swigregister = _flog_ofp_v1_0.Action_set_vlan_vid_swigregister
Action_set_vlan_vid_swigregister(Action_set_vlan_vid)

class Action_set_vlan_pcp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action_set_vlan_pcp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action_set_vlan_pcp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _flog_ofp_v1_0.Action_set_vlan_pcp_value_set
    __swig_getmethods__["value"] = _flog_ofp_v1_0.Action_set_vlan_pcp_value_get
    if _newclass:value = _swig_property(_flog_ofp_v1_0.Action_set_vlan_pcp_value_get, _flog_ofp_v1_0.Action_set_vlan_pcp_value_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action_set_vlan_pcp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action_set_vlan_pcp
    __del__ = lambda self : None;
Action_set_vlan_pcp_swigregister = _flog_ofp_v1_0.Action_set_vlan_pcp_swigregister
Action_set_vlan_pcp_swigregister(Action_set_vlan_pcp)

class Action_strip_vlan(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action_strip_vlan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action_strip_vlan, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action_strip_vlan()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action_strip_vlan
    __del__ = lambda self : None;
Action_strip_vlan_swigregister = _flog_ofp_v1_0.Action_strip_vlan_swigregister
Action_strip_vlan_swigregister(Action_strip_vlan)

class Action_set_dl_src(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action_set_dl_src, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action_set_dl_src, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dl_addr"] = _flog_ofp_v1_0.Action_set_dl_src_dl_addr_set
    __swig_getmethods__["dl_addr"] = _flog_ofp_v1_0.Action_set_dl_src_dl_addr_get
    if _newclass:dl_addr = _swig_property(_flog_ofp_v1_0.Action_set_dl_src_dl_addr_get, _flog_ofp_v1_0.Action_set_dl_src_dl_addr_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action_set_dl_src()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action_set_dl_src
    __del__ = lambda self : None;
Action_set_dl_src_swigregister = _flog_ofp_v1_0.Action_set_dl_src_swigregister
Action_set_dl_src_swigregister(Action_set_dl_src)

class Action_set_dl_dst(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action_set_dl_dst, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action_set_dl_dst, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dl_addr"] = _flog_ofp_v1_0.Action_set_dl_dst_dl_addr_set
    __swig_getmethods__["dl_addr"] = _flog_ofp_v1_0.Action_set_dl_dst_dl_addr_get
    if _newclass:dl_addr = _swig_property(_flog_ofp_v1_0.Action_set_dl_dst_dl_addr_get, _flog_ofp_v1_0.Action_set_dl_dst_dl_addr_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action_set_dl_dst()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action_set_dl_dst
    __del__ = lambda self : None;
Action_set_dl_dst_swigregister = _flog_ofp_v1_0.Action_set_dl_dst_swigregister
Action_set_dl_dst_swigregister(Action_set_dl_dst)

class Action_set_nw_src(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action_set_nw_src, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action_set_nw_src, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _flog_ofp_v1_0.Action_set_nw_src_addr_set
    __swig_getmethods__["addr"] = _flog_ofp_v1_0.Action_set_nw_src_addr_get
    if _newclass:addr = _swig_property(_flog_ofp_v1_0.Action_set_nw_src_addr_get, _flog_ofp_v1_0.Action_set_nw_src_addr_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action_set_nw_src()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action_set_nw_src
    __del__ = lambda self : None;
Action_set_nw_src_swigregister = _flog_ofp_v1_0.Action_set_nw_src_swigregister
Action_set_nw_src_swigregister(Action_set_nw_src)

class Action_set_nw_dst(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action_set_nw_dst, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action_set_nw_dst, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _flog_ofp_v1_0.Action_set_nw_dst_addr_set
    __swig_getmethods__["addr"] = _flog_ofp_v1_0.Action_set_nw_dst_addr_get
    if _newclass:addr = _swig_property(_flog_ofp_v1_0.Action_set_nw_dst_addr_get, _flog_ofp_v1_0.Action_set_nw_dst_addr_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action_set_nw_dst()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action_set_nw_dst
    __del__ = lambda self : None;
Action_set_nw_dst_swigregister = _flog_ofp_v1_0.Action_set_nw_dst_swigregister
Action_set_nw_dst_swigregister(Action_set_nw_dst)

class Action_set_nw_tos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action_set_nw_tos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action_set_nw_tos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _flog_ofp_v1_0.Action_set_nw_tos_value_set
    __swig_getmethods__["value"] = _flog_ofp_v1_0.Action_set_nw_tos_value_get
    if _newclass:value = _swig_property(_flog_ofp_v1_0.Action_set_nw_tos_value_get, _flog_ofp_v1_0.Action_set_nw_tos_value_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action_set_nw_tos()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action_set_nw_tos
    __del__ = lambda self : None;
Action_set_nw_tos_swigregister = _flog_ofp_v1_0.Action_set_nw_tos_swigregister
Action_set_nw_tos_swigregister(Action_set_nw_tos)

class Action_set_tp_src(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action_set_tp_src, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action_set_tp_src, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _flog_ofp_v1_0.Action_set_tp_src_value_set
    __swig_getmethods__["value"] = _flog_ofp_v1_0.Action_set_tp_src_value_get
    if _newclass:value = _swig_property(_flog_ofp_v1_0.Action_set_tp_src_value_get, _flog_ofp_v1_0.Action_set_tp_src_value_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action_set_tp_src()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action_set_tp_src
    __del__ = lambda self : None;
Action_set_tp_src_swigregister = _flog_ofp_v1_0.Action_set_tp_src_swigregister
Action_set_tp_src_swigregister(Action_set_tp_src)

class Action_set_tp_dst(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action_set_tp_dst, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action_set_tp_dst, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _flog_ofp_v1_0.Action_set_tp_dst_value_set
    __swig_getmethods__["value"] = _flog_ofp_v1_0.Action_set_tp_dst_value_get
    if _newclass:value = _swig_property(_flog_ofp_v1_0.Action_set_tp_dst_value_get, _flog_ofp_v1_0.Action_set_tp_dst_value_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action_set_tp_dst()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action_set_tp_dst
    __del__ = lambda self : None;
Action_set_tp_dst_swigregister = _flog_ofp_v1_0.Action_set_tp_dst_swigregister
Action_set_tp_dst_swigregister(Action_set_tp_dst)

class Action_enqueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action_enqueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action_enqueue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port"] = _flog_ofp_v1_0.Action_enqueue_port_set
    __swig_getmethods__["port"] = _flog_ofp_v1_0.Action_enqueue_port_get
    if _newclass:port = _swig_property(_flog_ofp_v1_0.Action_enqueue_port_get, _flog_ofp_v1_0.Action_enqueue_port_set)
    __swig_setmethods__["queue_id"] = _flog_ofp_v1_0.Action_enqueue_queue_id_set
    __swig_getmethods__["queue_id"] = _flog_ofp_v1_0.Action_enqueue_queue_id_get
    if _newclass:queue_id = _swig_property(_flog_ofp_v1_0.Action_enqueue_queue_id_get, _flog_ofp_v1_0.Action_enqueue_queue_id_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action_enqueue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action_enqueue
    __del__ = lambda self : None;
Action_enqueue_swigregister = _flog_ofp_v1_0.Action_enqueue_swigregister
Action_enqueue_swigregister(Action_enqueue)

class Action_vendor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action_vendor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action_vendor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vendor"] = _flog_ofp_v1_0.Action_vendor_vendor_set
    __swig_getmethods__["vendor"] = _flog_ofp_v1_0.Action_vendor_vendor_get
    if _newclass:vendor = _swig_property(_flog_ofp_v1_0.Action_vendor_vendor_get, _flog_ofp_v1_0.Action_vendor_vendor_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action_vendor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action_vendor
    __del__ = lambda self : None;
Action_vendor_swigregister = _flog_ofp_v1_0.Action_vendor_swigregister
Action_vendor_swigregister(Action_vendor)

class Action_payload_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action_payload_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action_payload_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["output"] = _flog_ofp_v1_0.Action_payload_data_output_set
    __swig_getmethods__["output"] = _flog_ofp_v1_0.Action_payload_data_output_get
    if _newclass:output = _swig_property(_flog_ofp_v1_0.Action_payload_data_output_get, _flog_ofp_v1_0.Action_payload_data_output_set)
    __swig_setmethods__["vlan_vid"] = _flog_ofp_v1_0.Action_payload_data_vlan_vid_set
    __swig_getmethods__["vlan_vid"] = _flog_ofp_v1_0.Action_payload_data_vlan_vid_get
    if _newclass:vlan_vid = _swig_property(_flog_ofp_v1_0.Action_payload_data_vlan_vid_get, _flog_ofp_v1_0.Action_payload_data_vlan_vid_set)
    __swig_setmethods__["vlan_pcp"] = _flog_ofp_v1_0.Action_payload_data_vlan_pcp_set
    __swig_getmethods__["vlan_pcp"] = _flog_ofp_v1_0.Action_payload_data_vlan_pcp_get
    if _newclass:vlan_pcp = _swig_property(_flog_ofp_v1_0.Action_payload_data_vlan_pcp_get, _flog_ofp_v1_0.Action_payload_data_vlan_pcp_set)
    __swig_setmethods__["strip_vlan"] = _flog_ofp_v1_0.Action_payload_data_strip_vlan_set
    __swig_getmethods__["strip_vlan"] = _flog_ofp_v1_0.Action_payload_data_strip_vlan_get
    if _newclass:strip_vlan = _swig_property(_flog_ofp_v1_0.Action_payload_data_strip_vlan_get, _flog_ofp_v1_0.Action_payload_data_strip_vlan_set)
    __swig_setmethods__["dl_src"] = _flog_ofp_v1_0.Action_payload_data_dl_src_set
    __swig_getmethods__["dl_src"] = _flog_ofp_v1_0.Action_payload_data_dl_src_get
    if _newclass:dl_src = _swig_property(_flog_ofp_v1_0.Action_payload_data_dl_src_get, _flog_ofp_v1_0.Action_payload_data_dl_src_set)
    __swig_setmethods__["dl_dst"] = _flog_ofp_v1_0.Action_payload_data_dl_dst_set
    __swig_getmethods__["dl_dst"] = _flog_ofp_v1_0.Action_payload_data_dl_dst_get
    if _newclass:dl_dst = _swig_property(_flog_ofp_v1_0.Action_payload_data_dl_dst_get, _flog_ofp_v1_0.Action_payload_data_dl_dst_set)
    __swig_setmethods__["nw_src"] = _flog_ofp_v1_0.Action_payload_data_nw_src_set
    __swig_getmethods__["nw_src"] = _flog_ofp_v1_0.Action_payload_data_nw_src_get
    if _newclass:nw_src = _swig_property(_flog_ofp_v1_0.Action_payload_data_nw_src_get, _flog_ofp_v1_0.Action_payload_data_nw_src_set)
    __swig_setmethods__["nw_dst"] = _flog_ofp_v1_0.Action_payload_data_nw_dst_set
    __swig_getmethods__["nw_dst"] = _flog_ofp_v1_0.Action_payload_data_nw_dst_get
    if _newclass:nw_dst = _swig_property(_flog_ofp_v1_0.Action_payload_data_nw_dst_get, _flog_ofp_v1_0.Action_payload_data_nw_dst_set)
    __swig_setmethods__["nw_tos"] = _flog_ofp_v1_0.Action_payload_data_nw_tos_set
    __swig_getmethods__["nw_tos"] = _flog_ofp_v1_0.Action_payload_data_nw_tos_get
    if _newclass:nw_tos = _swig_property(_flog_ofp_v1_0.Action_payload_data_nw_tos_get, _flog_ofp_v1_0.Action_payload_data_nw_tos_set)
    __swig_setmethods__["tp_src"] = _flog_ofp_v1_0.Action_payload_data_tp_src_set
    __swig_getmethods__["tp_src"] = _flog_ofp_v1_0.Action_payload_data_tp_src_get
    if _newclass:tp_src = _swig_property(_flog_ofp_v1_0.Action_payload_data_tp_src_get, _flog_ofp_v1_0.Action_payload_data_tp_src_set)
    __swig_setmethods__["tp_dst"] = _flog_ofp_v1_0.Action_payload_data_tp_dst_set
    __swig_getmethods__["tp_dst"] = _flog_ofp_v1_0.Action_payload_data_tp_dst_get
    if _newclass:tp_dst = _swig_property(_flog_ofp_v1_0.Action_payload_data_tp_dst_get, _flog_ofp_v1_0.Action_payload_data_tp_dst_set)
    __swig_setmethods__["enqueue"] = _flog_ofp_v1_0.Action_payload_data_enqueue_set
    __swig_getmethods__["enqueue"] = _flog_ofp_v1_0.Action_payload_data_enqueue_get
    if _newclass:enqueue = _swig_property(_flog_ofp_v1_0.Action_payload_data_enqueue_get, _flog_ofp_v1_0.Action_payload_data_enqueue_set)
    __swig_setmethods__["vendor"] = _flog_ofp_v1_0.Action_payload_data_vendor_set
    __swig_getmethods__["vendor"] = _flog_ofp_v1_0.Action_payload_data_vendor_get
    if _newclass:vendor = _swig_property(_flog_ofp_v1_0.Action_payload_data_vendor_get, _flog_ofp_v1_0.Action_payload_data_vendor_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action_payload_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action_payload_data
    __del__ = lambda self : None;
Action_payload_data_swigregister = _flog_ofp_v1_0.Action_payload_data_swigregister
Action_payload_data_swigregister(Action_payload_data)

class Action_payload(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action_payload, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action_payload, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _flog_ofp_v1_0.Action_payload_data_set
    __swig_getmethods__["data"] = _flog_ofp_v1_0.Action_payload_data_get
    if _newclass:data = _swig_property(_flog_ofp_v1_0.Action_payload_data_get, _flog_ofp_v1_0.Action_payload_data_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action_payload()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action_payload
    __del__ = lambda self : None;
Action_payload_swigregister = _flog_ofp_v1_0.Action_payload_swigregister
Action_payload_swigregister(Action_payload)

class Action_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _flog_ofp_v1_0.Action_header_type_set
    __swig_getmethods__["type"] = _flog_ofp_v1_0.Action_header_type_get
    if _newclass:type = _swig_property(_flog_ofp_v1_0.Action_header_type_get, _flog_ofp_v1_0.Action_header_type_set)
    __swig_setmethods__["length"] = _flog_ofp_v1_0.Action_header_length_set
    __swig_getmethods__["length"] = _flog_ofp_v1_0.Action_header_length_get
    if _newclass:length = _swig_property(_flog_ofp_v1_0.Action_header_length_get, _flog_ofp_v1_0.Action_header_length_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action_header
    __del__ = lambda self : None;
Action_header_swigregister = _flog_ofp_v1_0.Action_header_swigregister
Action_header_swigregister(Action_header)

class Action(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Action, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _flog_ofp_v1_0.Action_header_set
    __swig_getmethods__["header"] = _flog_ofp_v1_0.Action_header_get
    if _newclass:header = _swig_property(_flog_ofp_v1_0.Action_header_get, _flog_ofp_v1_0.Action_header_set)
    __swig_setmethods__["payload"] = _flog_ofp_v1_0.Action_payload_set
    __swig_getmethods__["payload"] = _flog_ofp_v1_0.Action_payload_get
    if _newclass:payload = _swig_property(_flog_ofp_v1_0.Action_payload_get, _flog_ofp_v1_0.Action_payload_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Action()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Action
    __del__ = lambda self : None;
Action_swigregister = _flog_ofp_v1_0.Action_swigregister
Action_swigregister(Action)

class Queue_property_none(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Queue_property_none, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Queue_property_none, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Queue_property_none()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Queue_property_none
    __del__ = lambda self : None;
Queue_property_none_swigregister = _flog_ofp_v1_0.Queue_property_none_swigregister
Queue_property_none_swigregister(Queue_property_none)

class Queue_property_min_rate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Queue_property_min_rate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Queue_property_min_rate, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Queue_property_min_rate()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Queue_property_min_rate
    __del__ = lambda self : None;
Queue_property_min_rate_swigregister = _flog_ofp_v1_0.Queue_property_min_rate_swigregister
Queue_property_min_rate_swigregister(Queue_property_min_rate)

class Queue_property_payload_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Queue_property_payload_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Queue_property_payload_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["none"] = _flog_ofp_v1_0.Queue_property_payload_data_none_set
    __swig_getmethods__["none"] = _flog_ofp_v1_0.Queue_property_payload_data_none_get
    if _newclass:none = _swig_property(_flog_ofp_v1_0.Queue_property_payload_data_none_get, _flog_ofp_v1_0.Queue_property_payload_data_none_set)
    __swig_setmethods__["min_rate"] = _flog_ofp_v1_0.Queue_property_payload_data_min_rate_set
    __swig_getmethods__["min_rate"] = _flog_ofp_v1_0.Queue_property_payload_data_min_rate_get
    if _newclass:min_rate = _swig_property(_flog_ofp_v1_0.Queue_property_payload_data_min_rate_get, _flog_ofp_v1_0.Queue_property_payload_data_min_rate_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Queue_property_payload_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Queue_property_payload_data
    __del__ = lambda self : None;
Queue_property_payload_data_swigregister = _flog_ofp_v1_0.Queue_property_payload_data_swigregister
Queue_property_payload_data_swigregister(Queue_property_payload_data)

class Queue_property_payload(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Queue_property_payload, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Queue_property_payload, name)
    __repr__ = _swig_repr
    __swig_setmethods__["init"] = _flog_ofp_v1_0.Queue_property_payload_init_set
    __swig_getmethods__["init"] = _flog_ofp_v1_0.Queue_property_payload_init_get
    if _newclass:init = _swig_property(_flog_ofp_v1_0.Queue_property_payload_init_get, _flog_ofp_v1_0.Queue_property_payload_init_set)
    __swig_setmethods__["data"] = _flog_ofp_v1_0.Queue_property_payload_data_set
    __swig_getmethods__["data"] = _flog_ofp_v1_0.Queue_property_payload_data_get
    if _newclass:data = _swig_property(_flog_ofp_v1_0.Queue_property_payload_data_get, _flog_ofp_v1_0.Queue_property_payload_data_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Queue_property_payload()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Queue_property_payload
    __del__ = lambda self : None;
Queue_property_payload_swigregister = _flog_ofp_v1_0.Queue_property_payload_swigregister
Queue_property_payload_swigregister(Queue_property_payload)

class Queue_property_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Queue_property_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Queue_property_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["property"] = _flog_ofp_v1_0.Queue_property_header_property_set
    __swig_getmethods__["property"] = _flog_ofp_v1_0.Queue_property_header_property_get
    if _newclass:property = _swig_property(_flog_ofp_v1_0.Queue_property_header_property_get, _flog_ofp_v1_0.Queue_property_header_property_set)
    __swig_setmethods__["length"] = _flog_ofp_v1_0.Queue_property_header_length_set
    __swig_getmethods__["length"] = _flog_ofp_v1_0.Queue_property_header_length_get
    if _newclass:length = _swig_property(_flog_ofp_v1_0.Queue_property_header_length_get, _flog_ofp_v1_0.Queue_property_header_length_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Queue_property_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Queue_property_header
    __del__ = lambda self : None;
Queue_property_header_swigregister = _flog_ofp_v1_0.Queue_property_header_swigregister
Queue_property_header_swigregister(Queue_property_header)

class Queue_property(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Queue_property, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Queue_property, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _flog_ofp_v1_0.Queue_property_header_set
    __swig_getmethods__["header"] = _flog_ofp_v1_0.Queue_property_header_get
    if _newclass:header = _swig_property(_flog_ofp_v1_0.Queue_property_header_get, _flog_ofp_v1_0.Queue_property_header_set)
    __swig_setmethods__["payload"] = _flog_ofp_v1_0.Queue_property_payload_set
    __swig_getmethods__["payload"] = _flog_ofp_v1_0.Queue_property_payload_get
    if _newclass:payload = _swig_property(_flog_ofp_v1_0.Queue_property_payload_get, _flog_ofp_v1_0.Queue_property_payload_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Queue_property()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Queue_property
    __del__ = lambda self : None;
Queue_property_swigregister = _flog_ofp_v1_0.Queue_property_swigregister
Queue_property_swigregister(Queue_property)

class Queue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Queue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Queue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["queue_id"] = _flog_ofp_v1_0.Queue_queue_id_set
    __swig_getmethods__["queue_id"] = _flog_ofp_v1_0.Queue_queue_id_get
    if _newclass:queue_id = _swig_property(_flog_ofp_v1_0.Queue_queue_id_get, _flog_ofp_v1_0.Queue_queue_id_set)
    __swig_setmethods__["length"] = _flog_ofp_v1_0.Queue_length_set
    __swig_getmethods__["length"] = _flog_ofp_v1_0.Queue_length_get
    if _newclass:length = _swig_property(_flog_ofp_v1_0.Queue_length_get, _flog_ofp_v1_0.Queue_length_set)
    __swig_setmethods__["properties"] = _flog_ofp_v1_0.Queue_properties_set
    __swig_getmethods__["properties"] = _flog_ofp_v1_0.Queue_properties_get
    if _newclass:properties = _swig_property(_flog_ofp_v1_0.Queue_properties_get, _flog_ofp_v1_0.Queue_properties_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Queue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Queue
    __del__ = lambda self : None;
Queue_swigregister = _flog_ofp_v1_0.Queue_swigregister
Queue_swigregister(Queue)

class Hello(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hello, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hello, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _flog_ofp_v1_0.Hello_data_set
    __swig_getmethods__["data"] = _flog_ofp_v1_0.Hello_data_get
    if _newclass:data = _swig_property(_flog_ofp_v1_0.Hello_data_get, _flog_ofp_v1_0.Hello_data_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Hello()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Hello
    __del__ = lambda self : None;
Hello_swigregister = _flog_ofp_v1_0.Hello_swigregister
Hello_swigregister(Hello)

class Error(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Error, name)
    __repr__ = _swig_repr
    HELLO_FAILED = _flog_ofp_v1_0.Error_HELLO_FAILED
    BAD_REQUEST = _flog_ofp_v1_0.Error_BAD_REQUEST
    BAD_ACTION = _flog_ofp_v1_0.Error_BAD_ACTION
    FLOW_MOD_FAILED = _flog_ofp_v1_0.Error_FLOW_MOD_FAILED
    PORT_MOD_FAILED = _flog_ofp_v1_0.Error_PORT_MOD_FAILED
    QUEUE_OP_FAILED = _flog_ofp_v1_0.Error_QUEUE_OP_FAILED
    HF_INCOMPATIBLE = _flog_ofp_v1_0.Error_HF_INCOMPATIBLE
    HF_EPERM = _flog_ofp_v1_0.Error_HF_EPERM
    BR_BAD_VERSION = _flog_ofp_v1_0.Error_BR_BAD_VERSION
    BR_BAD_TYPE = _flog_ofp_v1_0.Error_BR_BAD_TYPE
    BR_BAD_STAT = _flog_ofp_v1_0.Error_BR_BAD_STAT
    BR_BAD_VENDOR = _flog_ofp_v1_0.Error_BR_BAD_VENDOR
    BR_BAD_SUBTYPE = _flog_ofp_v1_0.Error_BR_BAD_SUBTYPE
    BR_EPERM = _flog_ofp_v1_0.Error_BR_EPERM
    BR_BAD_LEN = _flog_ofp_v1_0.Error_BR_BAD_LEN
    BR_BUFFER_EMPTY = _flog_ofp_v1_0.Error_BR_BUFFER_EMPTY
    BR_BUFFER_UNKNOWN = _flog_ofp_v1_0.Error_BR_BUFFER_UNKNOWN
    BA_BAD_TYPE = _flog_ofp_v1_0.Error_BA_BAD_TYPE
    BA_BAD_LEN = _flog_ofp_v1_0.Error_BA_BAD_LEN
    BA_BAD_VENDOR = _flog_ofp_v1_0.Error_BA_BAD_VENDOR
    BA_BAD_VENDOR_TYPE = _flog_ofp_v1_0.Error_BA_BAD_VENDOR_TYPE
    BA_BAD_OUT_PORT = _flog_ofp_v1_0.Error_BA_BAD_OUT_PORT
    BA_BAD_ARGUMENT = _flog_ofp_v1_0.Error_BA_BAD_ARGUMENT
    BA_EPERM = _flog_ofp_v1_0.Error_BA_EPERM
    BA_TOO_MANY = _flog_ofp_v1_0.Error_BA_TOO_MANY
    BA_BAD_QUEUE = _flog_ofp_v1_0.Error_BA_BAD_QUEUE
    FMF_ALL_TABLES_FULL = _flog_ofp_v1_0.Error_FMF_ALL_TABLES_FULL
    FMF_OVERLAP = _flog_ofp_v1_0.Error_FMF_OVERLAP
    FMF_EPERM = _flog_ofp_v1_0.Error_FMF_EPERM
    FMF_BAD_EMERG_TIMEOUT = _flog_ofp_v1_0.Error_FMF_BAD_EMERG_TIMEOUT
    FMF_BAD_COMMAND = _flog_ofp_v1_0.Error_FMF_BAD_COMMAND
    FMF_UNSUPPORTED = _flog_ofp_v1_0.Error_FMF_UNSUPPORTED
    PMF_BAD_PORT = _flog_ofp_v1_0.Error_PMF_BAD_PORT
    PMF_BAD_HW_ADDR = _flog_ofp_v1_0.Error_PMF_BAD_HW_ADDR
    QOF_BAD_PORT = _flog_ofp_v1_0.Error_QOF_BAD_PORT
    QOF_BAD_QUEUE = _flog_ofp_v1_0.Error_QOF_BAD_QUEUE
    QOF_EPERM = _flog_ofp_v1_0.Error_QOF_EPERM
    __swig_setmethods__["type"] = _flog_ofp_v1_0.Error_type_set
    __swig_getmethods__["type"] = _flog_ofp_v1_0.Error_type_get
    if _newclass:type = _swig_property(_flog_ofp_v1_0.Error_type_get, _flog_ofp_v1_0.Error_type_set)
    __swig_setmethods__["code"] = _flog_ofp_v1_0.Error_code_set
    __swig_getmethods__["code"] = _flog_ofp_v1_0.Error_code_get
    if _newclass:code = _swig_property(_flog_ofp_v1_0.Error_code_get, _flog_ofp_v1_0.Error_code_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Error()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Error
    __del__ = lambda self : None;
Error_swigregister = _flog_ofp_v1_0.Error_swigregister
Error_swigregister(Error)

class Echo_req(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Echo_req, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Echo_req, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _flog_ofp_v1_0.Echo_req_data_set
    __swig_getmethods__["data"] = _flog_ofp_v1_0.Echo_req_data_get
    if _newclass:data = _swig_property(_flog_ofp_v1_0.Echo_req_data_get, _flog_ofp_v1_0.Echo_req_data_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Echo_req()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Echo_req
    __del__ = lambda self : None;
Echo_req_swigregister = _flog_ofp_v1_0.Echo_req_swigregister
Echo_req_swigregister(Echo_req)

class Echo_res(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Echo_res, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Echo_res, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _flog_ofp_v1_0.Echo_res_data_set
    __swig_getmethods__["data"] = _flog_ofp_v1_0.Echo_res_data_get
    if _newclass:data = _swig_property(_flog_ofp_v1_0.Echo_res_data_get, _flog_ofp_v1_0.Echo_res_data_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Echo_res()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Echo_res
    __del__ = lambda self : None;
Echo_res_swigregister = _flog_ofp_v1_0.Echo_res_swigregister
Echo_res_swigregister(Echo_res)

class Vendor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vendor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vendor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vendor_id"] = _flog_ofp_v1_0.Vendor_vendor_id_set
    __swig_getmethods__["vendor_id"] = _flog_ofp_v1_0.Vendor_vendor_id_get
    if _newclass:vendor_id = _swig_property(_flog_ofp_v1_0.Vendor_vendor_id_get, _flog_ofp_v1_0.Vendor_vendor_id_set)
    __swig_setmethods__["data"] = _flog_ofp_v1_0.Vendor_data_set
    __swig_getmethods__["data"] = _flog_ofp_v1_0.Vendor_data_get
    if _newclass:data = _swig_property(_flog_ofp_v1_0.Vendor_data_get, _flog_ofp_v1_0.Vendor_data_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Vendor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Vendor
    __del__ = lambda self : None;
Vendor_swigregister = _flog_ofp_v1_0.Vendor_swigregister
Vendor_swigregister(Vendor)

class Feature_req(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Feature_req, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Feature_req, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Feature_req()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Feature_req
    __del__ = lambda self : None;
Feature_req_swigregister = _flog_ofp_v1_0.Feature_req_swigregister
Feature_req_swigregister(Feature_req)

class Feature_res(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Feature_res, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Feature_res, name)
    __repr__ = _swig_repr
    FLOW_STATS = _flog_ofp_v1_0.Feature_res_FLOW_STATS
    TABLE_STATS = _flog_ofp_v1_0.Feature_res_TABLE_STATS
    PORT_STATS = _flog_ofp_v1_0.Feature_res_PORT_STATS
    STP = _flog_ofp_v1_0.Feature_res_STP
    RESERVED = _flog_ofp_v1_0.Feature_res_RESERVED
    IP_REASM = _flog_ofp_v1_0.Feature_res_IP_REASM
    QUEUE_STATS = _flog_ofp_v1_0.Feature_res_QUEUE_STATS
    ARP_MATCH_IP = _flog_ofp_v1_0.Feature_res_ARP_MATCH_IP
    OUTPUT = _flog_ofp_v1_0.Feature_res_OUTPUT
    SET_VLAN_VID = _flog_ofp_v1_0.Feature_res_SET_VLAN_VID
    SET_VLAN_PCP = _flog_ofp_v1_0.Feature_res_SET_VLAN_PCP
    STRIP_VLAN = _flog_ofp_v1_0.Feature_res_STRIP_VLAN
    SET_DL_SRC = _flog_ofp_v1_0.Feature_res_SET_DL_SRC
    SET_DL_DST = _flog_ofp_v1_0.Feature_res_SET_DL_DST
    SET_NW_SRC = _flog_ofp_v1_0.Feature_res_SET_NW_SRC
    SET_NW_DST = _flog_ofp_v1_0.Feature_res_SET_NW_DST
    SET_NW_TOS = _flog_ofp_v1_0.Feature_res_SET_NW_TOS
    SET_TP_SRC = _flog_ofp_v1_0.Feature_res_SET_TP_SRC
    SET_TP_DST = _flog_ofp_v1_0.Feature_res_SET_TP_DST
    ENQUEUE = _flog_ofp_v1_0.Feature_res_ENQUEUE
    __swig_setmethods__["datapath_id"] = _flog_ofp_v1_0.Feature_res_datapath_id_set
    __swig_getmethods__["datapath_id"] = _flog_ofp_v1_0.Feature_res_datapath_id_get
    if _newclass:datapath_id = _swig_property(_flog_ofp_v1_0.Feature_res_datapath_id_get, _flog_ofp_v1_0.Feature_res_datapath_id_set)
    __swig_setmethods__["n_buffers"] = _flog_ofp_v1_0.Feature_res_n_buffers_set
    __swig_getmethods__["n_buffers"] = _flog_ofp_v1_0.Feature_res_n_buffers_get
    if _newclass:n_buffers = _swig_property(_flog_ofp_v1_0.Feature_res_n_buffers_get, _flog_ofp_v1_0.Feature_res_n_buffers_set)
    __swig_setmethods__["n_tbls"] = _flog_ofp_v1_0.Feature_res_n_tbls_set
    __swig_getmethods__["n_tbls"] = _flog_ofp_v1_0.Feature_res_n_tbls_get
    if _newclass:n_tbls = _swig_property(_flog_ofp_v1_0.Feature_res_n_tbls_get, _flog_ofp_v1_0.Feature_res_n_tbls_set)
    __swig_setmethods__["capabilities"] = _flog_ofp_v1_0.Feature_res_capabilities_set
    __swig_getmethods__["capabilities"] = _flog_ofp_v1_0.Feature_res_capabilities_get
    if _newclass:capabilities = _swig_property(_flog_ofp_v1_0.Feature_res_capabilities_get, _flog_ofp_v1_0.Feature_res_capabilities_set)
    __swig_setmethods__["feature_actions"] = _flog_ofp_v1_0.Feature_res_feature_actions_set
    __swig_getmethods__["feature_actions"] = _flog_ofp_v1_0.Feature_res_feature_actions_get
    if _newclass:feature_actions = _swig_property(_flog_ofp_v1_0.Feature_res_feature_actions_get, _flog_ofp_v1_0.Feature_res_feature_actions_set)
    __swig_setmethods__["ports"] = _flog_ofp_v1_0.Feature_res_ports_set
    __swig_getmethods__["ports"] = _flog_ofp_v1_0.Feature_res_ports_get
    if _newclass:ports = _swig_property(_flog_ofp_v1_0.Feature_res_ports_get, _flog_ofp_v1_0.Feature_res_ports_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Feature_res()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Feature_res
    __del__ = lambda self : None;
Feature_res_swigregister = _flog_ofp_v1_0.Feature_res_swigregister
Feature_res_swigregister(Feature_res)

class Get_config_req(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Get_config_req, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Get_config_req, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Get_config_req()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Get_config_req
    __del__ = lambda self : None;
Get_config_req_swigregister = _flog_ofp_v1_0.Get_config_req_swigregister
Get_config_req_swigregister(Get_config_req)

class Get_config_res(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Get_config_res, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Get_config_res, name)
    __repr__ = _swig_repr
    FRAG_NORMAL = _flog_ofp_v1_0.Get_config_res_FRAG_NORMAL
    FRAG_DROP = _flog_ofp_v1_0.Get_config_res_FRAG_DROP
    FRAG_REASM = _flog_ofp_v1_0.Get_config_res_FRAG_REASM
    FRAG_MASK = _flog_ofp_v1_0.Get_config_res_FRAG_MASK
    __swig_setmethods__["flags"] = _flog_ofp_v1_0.Get_config_res_flags_set
    __swig_getmethods__["flags"] = _flog_ofp_v1_0.Get_config_res_flags_get
    if _newclass:flags = _swig_property(_flog_ofp_v1_0.Get_config_res_flags_get, _flog_ofp_v1_0.Get_config_res_flags_set)
    __swig_setmethods__["miss_send_len"] = _flog_ofp_v1_0.Get_config_res_miss_send_len_set
    __swig_getmethods__["miss_send_len"] = _flog_ofp_v1_0.Get_config_res_miss_send_len_get
    if _newclass:miss_send_len = _swig_property(_flog_ofp_v1_0.Get_config_res_miss_send_len_get, _flog_ofp_v1_0.Get_config_res_miss_send_len_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Get_config_res()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Get_config_res
    __del__ = lambda self : None;
Get_config_res_swigregister = _flog_ofp_v1_0.Get_config_res_swigregister
Get_config_res_swigregister(Get_config_res)

class Set_config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Set_config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Set_config, name)
    __repr__ = _swig_repr
    FRAG_NORMAL = _flog_ofp_v1_0.Set_config_FRAG_NORMAL
    FRAG_DROP = _flog_ofp_v1_0.Set_config_FRAG_DROP
    FRAG_REASM = _flog_ofp_v1_0.Set_config_FRAG_REASM
    FRAG_MASK = _flog_ofp_v1_0.Set_config_FRAG_MASK
    __swig_setmethods__["flags"] = _flog_ofp_v1_0.Set_config_flags_set
    __swig_getmethods__["flags"] = _flog_ofp_v1_0.Set_config_flags_get
    if _newclass:flags = _swig_property(_flog_ofp_v1_0.Set_config_flags_get, _flog_ofp_v1_0.Set_config_flags_set)
    __swig_setmethods__["miss_send_len"] = _flog_ofp_v1_0.Set_config_miss_send_len_set
    __swig_getmethods__["miss_send_len"] = _flog_ofp_v1_0.Set_config_miss_send_len_get
    if _newclass:miss_send_len = _swig_property(_flog_ofp_v1_0.Set_config_miss_send_len_get, _flog_ofp_v1_0.Set_config_miss_send_len_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Set_config()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Set_config
    __del__ = lambda self : None;
Set_config_swigregister = _flog_ofp_v1_0.Set_config_swigregister
Set_config_swigregister(Set_config)

class Packet_in(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Packet_in, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Packet_in, name)
    __repr__ = _swig_repr
    NO_MATCH = _flog_ofp_v1_0.Packet_in_NO_MATCH
    ACTION = _flog_ofp_v1_0.Packet_in_ACTION
    __swig_setmethods__["buffer_id"] = _flog_ofp_v1_0.Packet_in_buffer_id_set
    __swig_getmethods__["buffer_id"] = _flog_ofp_v1_0.Packet_in_buffer_id_get
    if _newclass:buffer_id = _swig_property(_flog_ofp_v1_0.Packet_in_buffer_id_get, _flog_ofp_v1_0.Packet_in_buffer_id_set)
    __swig_setmethods__["total_len"] = _flog_ofp_v1_0.Packet_in_total_len_set
    __swig_getmethods__["total_len"] = _flog_ofp_v1_0.Packet_in_total_len_get
    if _newclass:total_len = _swig_property(_flog_ofp_v1_0.Packet_in_total_len_get, _flog_ofp_v1_0.Packet_in_total_len_set)
    __swig_setmethods__["in_port"] = _flog_ofp_v1_0.Packet_in_in_port_set
    __swig_getmethods__["in_port"] = _flog_ofp_v1_0.Packet_in_in_port_get
    if _newclass:in_port = _swig_property(_flog_ofp_v1_0.Packet_in_in_port_get, _flog_ofp_v1_0.Packet_in_in_port_set)
    __swig_setmethods__["reason"] = _flog_ofp_v1_0.Packet_in_reason_set
    __swig_getmethods__["reason"] = _flog_ofp_v1_0.Packet_in_reason_get
    if _newclass:reason = _swig_property(_flog_ofp_v1_0.Packet_in_reason_get, _flog_ofp_v1_0.Packet_in_reason_set)
    __swig_setmethods__["data"] = _flog_ofp_v1_0.Packet_in_data_set
    __swig_getmethods__["data"] = _flog_ofp_v1_0.Packet_in_data_get
    if _newclass:data = _swig_property(_flog_ofp_v1_0.Packet_in_data_get, _flog_ofp_v1_0.Packet_in_data_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Packet_in()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Packet_in
    __del__ = lambda self : None;
Packet_in_swigregister = _flog_ofp_v1_0.Packet_in_swigregister
Packet_in_swigregister(Packet_in)

class Packet_out(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Packet_out, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Packet_out, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buffer_id"] = _flog_ofp_v1_0.Packet_out_buffer_id_set
    __swig_getmethods__["buffer_id"] = _flog_ofp_v1_0.Packet_out_buffer_id_get
    if _newclass:buffer_id = _swig_property(_flog_ofp_v1_0.Packet_out_buffer_id_get, _flog_ofp_v1_0.Packet_out_buffer_id_set)
    __swig_setmethods__["in_port"] = _flog_ofp_v1_0.Packet_out_in_port_set
    __swig_getmethods__["in_port"] = _flog_ofp_v1_0.Packet_out_in_port_get
    if _newclass:in_port = _swig_property(_flog_ofp_v1_0.Packet_out_in_port_get, _flog_ofp_v1_0.Packet_out_in_port_set)
    __swig_setmethods__["actions_len"] = _flog_ofp_v1_0.Packet_out_actions_len_set
    __swig_getmethods__["actions_len"] = _flog_ofp_v1_0.Packet_out_actions_len_get
    if _newclass:actions_len = _swig_property(_flog_ofp_v1_0.Packet_out_actions_len_get, _flog_ofp_v1_0.Packet_out_actions_len_set)
    __swig_setmethods__["actions"] = _flog_ofp_v1_0.Packet_out_actions_set
    __swig_getmethods__["actions"] = _flog_ofp_v1_0.Packet_out_actions_get
    if _newclass:actions = _swig_property(_flog_ofp_v1_0.Packet_out_actions_get, _flog_ofp_v1_0.Packet_out_actions_set)
    __swig_setmethods__["data"] = _flog_ofp_v1_0.Packet_out_data_set
    __swig_getmethods__["data"] = _flog_ofp_v1_0.Packet_out_data_get
    if _newclass:data = _swig_property(_flog_ofp_v1_0.Packet_out_data_get, _flog_ofp_v1_0.Packet_out_data_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Packet_out()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Packet_out
    __del__ = lambda self : None;
Packet_out_swigregister = _flog_ofp_v1_0.Packet_out_swigregister
Packet_out_swigregister(Packet_out)

class Flow_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Flow_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Flow_mod, name)
    __repr__ = _swig_repr
    ADD = _flog_ofp_v1_0.Flow_mod_ADD
    MODIFY = _flog_ofp_v1_0.Flow_mod_MODIFY
    MODIFY_STRICT = _flog_ofp_v1_0.Flow_mod_MODIFY_STRICT
    DELETE = _flog_ofp_v1_0.Flow_mod_DELETE
    DELETE_STRICT = _flog_ofp_v1_0.Flow_mod_DELETE_STRICT
    SEND_FLOW_REM = _flog_ofp_v1_0.Flow_mod_SEND_FLOW_REM
    CHECK_OVERLAP = _flog_ofp_v1_0.Flow_mod_CHECK_OVERLAP
    EMERG = _flog_ofp_v1_0.Flow_mod_EMERG
    __swig_setmethods__["match"] = _flog_ofp_v1_0.Flow_mod_match_set
    __swig_getmethods__["match"] = _flog_ofp_v1_0.Flow_mod_match_get
    if _newclass:match = _swig_property(_flog_ofp_v1_0.Flow_mod_match_get, _flog_ofp_v1_0.Flow_mod_match_set)
    __swig_setmethods__["cookie"] = _flog_ofp_v1_0.Flow_mod_cookie_set
    __swig_getmethods__["cookie"] = _flog_ofp_v1_0.Flow_mod_cookie_get
    if _newclass:cookie = _swig_property(_flog_ofp_v1_0.Flow_mod_cookie_get, _flog_ofp_v1_0.Flow_mod_cookie_set)
    __swig_setmethods__["command"] = _flog_ofp_v1_0.Flow_mod_command_set
    __swig_getmethods__["command"] = _flog_ofp_v1_0.Flow_mod_command_get
    if _newclass:command = _swig_property(_flog_ofp_v1_0.Flow_mod_command_get, _flog_ofp_v1_0.Flow_mod_command_set)
    __swig_setmethods__["idle_timeout"] = _flog_ofp_v1_0.Flow_mod_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _flog_ofp_v1_0.Flow_mod_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_flog_ofp_v1_0.Flow_mod_idle_timeout_get, _flog_ofp_v1_0.Flow_mod_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _flog_ofp_v1_0.Flow_mod_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _flog_ofp_v1_0.Flow_mod_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_flog_ofp_v1_0.Flow_mod_hard_timeout_get, _flog_ofp_v1_0.Flow_mod_hard_timeout_set)
    __swig_setmethods__["priority"] = _flog_ofp_v1_0.Flow_mod_priority_set
    __swig_getmethods__["priority"] = _flog_ofp_v1_0.Flow_mod_priority_get
    if _newclass:priority = _swig_property(_flog_ofp_v1_0.Flow_mod_priority_get, _flog_ofp_v1_0.Flow_mod_priority_set)
    __swig_setmethods__["buffer_id"] = _flog_ofp_v1_0.Flow_mod_buffer_id_set
    __swig_getmethods__["buffer_id"] = _flog_ofp_v1_0.Flow_mod_buffer_id_get
    if _newclass:buffer_id = _swig_property(_flog_ofp_v1_0.Flow_mod_buffer_id_get, _flog_ofp_v1_0.Flow_mod_buffer_id_set)
    __swig_setmethods__["out_port"] = _flog_ofp_v1_0.Flow_mod_out_port_set
    __swig_getmethods__["out_port"] = _flog_ofp_v1_0.Flow_mod_out_port_get
    if _newclass:out_port = _swig_property(_flog_ofp_v1_0.Flow_mod_out_port_get, _flog_ofp_v1_0.Flow_mod_out_port_set)
    __swig_setmethods__["flags"] = _flog_ofp_v1_0.Flow_mod_flags_set
    __swig_getmethods__["flags"] = _flog_ofp_v1_0.Flow_mod_flags_get
    if _newclass:flags = _swig_property(_flog_ofp_v1_0.Flow_mod_flags_get, _flog_ofp_v1_0.Flow_mod_flags_set)
    __swig_setmethods__["actions"] = _flog_ofp_v1_0.Flow_mod_actions_set
    __swig_getmethods__["actions"] = _flog_ofp_v1_0.Flow_mod_actions_get
    if _newclass:actions = _swig_property(_flog_ofp_v1_0.Flow_mod_actions_get, _flog_ofp_v1_0.Flow_mod_actions_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Flow_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Flow_mod
    __del__ = lambda self : None;
Flow_mod_swigregister = _flog_ofp_v1_0.Flow_mod_swigregister
Flow_mod_swigregister(Flow_mod)

class Flow_removed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Flow_removed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Flow_removed, name)
    __repr__ = _swig_repr
    IDLE_TIMEOUT = _flog_ofp_v1_0.Flow_removed_IDLE_TIMEOUT
    HARD_TIMEOUT = _flog_ofp_v1_0.Flow_removed_HARD_TIMEOUT
    DELETE = _flog_ofp_v1_0.Flow_removed_DELETE
    __swig_setmethods__["match"] = _flog_ofp_v1_0.Flow_removed_match_set
    __swig_getmethods__["match"] = _flog_ofp_v1_0.Flow_removed_match_get
    if _newclass:match = _swig_property(_flog_ofp_v1_0.Flow_removed_match_get, _flog_ofp_v1_0.Flow_removed_match_set)
    __swig_setmethods__["cookie"] = _flog_ofp_v1_0.Flow_removed_cookie_set
    __swig_getmethods__["cookie"] = _flog_ofp_v1_0.Flow_removed_cookie_get
    if _newclass:cookie = _swig_property(_flog_ofp_v1_0.Flow_removed_cookie_get, _flog_ofp_v1_0.Flow_removed_cookie_set)
    __swig_setmethods__["priority"] = _flog_ofp_v1_0.Flow_removed_priority_set
    __swig_getmethods__["priority"] = _flog_ofp_v1_0.Flow_removed_priority_get
    if _newclass:priority = _swig_property(_flog_ofp_v1_0.Flow_removed_priority_get, _flog_ofp_v1_0.Flow_removed_priority_set)
    __swig_setmethods__["reason"] = _flog_ofp_v1_0.Flow_removed_reason_set
    __swig_getmethods__["reason"] = _flog_ofp_v1_0.Flow_removed_reason_get
    if _newclass:reason = _swig_property(_flog_ofp_v1_0.Flow_removed_reason_get, _flog_ofp_v1_0.Flow_removed_reason_set)
    __swig_setmethods__["duration_sec"] = _flog_ofp_v1_0.Flow_removed_duration_sec_set
    __swig_getmethods__["duration_sec"] = _flog_ofp_v1_0.Flow_removed_duration_sec_get
    if _newclass:duration_sec = _swig_property(_flog_ofp_v1_0.Flow_removed_duration_sec_get, _flog_ofp_v1_0.Flow_removed_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _flog_ofp_v1_0.Flow_removed_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _flog_ofp_v1_0.Flow_removed_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_flog_ofp_v1_0.Flow_removed_duration_nsec_get, _flog_ofp_v1_0.Flow_removed_duration_nsec_set)
    __swig_setmethods__["idle_timeout"] = _flog_ofp_v1_0.Flow_removed_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _flog_ofp_v1_0.Flow_removed_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_flog_ofp_v1_0.Flow_removed_idle_timeout_get, _flog_ofp_v1_0.Flow_removed_idle_timeout_set)
    __swig_setmethods__["packet_count"] = _flog_ofp_v1_0.Flow_removed_packet_count_set
    __swig_getmethods__["packet_count"] = _flog_ofp_v1_0.Flow_removed_packet_count_get
    if _newclass:packet_count = _swig_property(_flog_ofp_v1_0.Flow_removed_packet_count_get, _flog_ofp_v1_0.Flow_removed_packet_count_set)
    __swig_setmethods__["byte_count"] = _flog_ofp_v1_0.Flow_removed_byte_count_set
    __swig_getmethods__["byte_count"] = _flog_ofp_v1_0.Flow_removed_byte_count_get
    if _newclass:byte_count = _swig_property(_flog_ofp_v1_0.Flow_removed_byte_count_get, _flog_ofp_v1_0.Flow_removed_byte_count_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Flow_removed()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Flow_removed
    __del__ = lambda self : None;
Flow_removed_swigregister = _flog_ofp_v1_0.Flow_removed_swigregister
Flow_removed_swigregister(Flow_removed)

class Port_mod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Port_mod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Port_mod, name)
    __repr__ = _swig_repr
    PORT_DOWN = _flog_ofp_v1_0.Port_mod_PORT_DOWN
    NO_STP = _flog_ofp_v1_0.Port_mod_NO_STP
    NO_RECV = _flog_ofp_v1_0.Port_mod_NO_RECV
    NO_RECV_STP = _flog_ofp_v1_0.Port_mod_NO_RECV_STP
    NO_FLOOD = _flog_ofp_v1_0.Port_mod_NO_FLOOD
    NO_FWD = _flog_ofp_v1_0.Port_mod_NO_FWD
    NO_PACKET_IN = _flog_ofp_v1_0.Port_mod_NO_PACKET_IN
    TEN_MB_HD = _flog_ofp_v1_0.Port_mod_TEN_MB_HD
    TEN_MB_FD = _flog_ofp_v1_0.Port_mod_TEN_MB_FD
    HUNDRED_MB_HD = _flog_ofp_v1_0.Port_mod_HUNDRED_MB_HD
    HUNDRED_MB_FD = _flog_ofp_v1_0.Port_mod_HUNDRED_MB_FD
    ONE_GB_HD = _flog_ofp_v1_0.Port_mod_ONE_GB_HD
    ONE_GB_FD = _flog_ofp_v1_0.Port_mod_ONE_GB_FD
    TEN_GB_FD = _flog_ofp_v1_0.Port_mod_TEN_GB_FD
    COPPER = _flog_ofp_v1_0.Port_mod_COPPER
    FIBER = _flog_ofp_v1_0.Port_mod_FIBER
    AUTO_NEG = _flog_ofp_v1_0.Port_mod_AUTO_NEG
    PAUSE = _flog_ofp_v1_0.Port_mod_PAUSE
    PAUSE_ASYM = _flog_ofp_v1_0.Port_mod_PAUSE_ASYM
    __swig_setmethods__["port"] = _flog_ofp_v1_0.Port_mod_port_set
    __swig_getmethods__["port"] = _flog_ofp_v1_0.Port_mod_port_get
    if _newclass:port = _swig_property(_flog_ofp_v1_0.Port_mod_port_get, _flog_ofp_v1_0.Port_mod_port_set)
    __swig_setmethods__["hw_addr"] = _flog_ofp_v1_0.Port_mod_hw_addr_set
    __swig_getmethods__["hw_addr"] = _flog_ofp_v1_0.Port_mod_hw_addr_get
    if _newclass:hw_addr = _swig_property(_flog_ofp_v1_0.Port_mod_hw_addr_get, _flog_ofp_v1_0.Port_mod_hw_addr_set)
    __swig_setmethods__["config"] = _flog_ofp_v1_0.Port_mod_config_set
    __swig_getmethods__["config"] = _flog_ofp_v1_0.Port_mod_config_get
    if _newclass:config = _swig_property(_flog_ofp_v1_0.Port_mod_config_get, _flog_ofp_v1_0.Port_mod_config_set)
    __swig_setmethods__["mask"] = _flog_ofp_v1_0.Port_mod_mask_set
    __swig_getmethods__["mask"] = _flog_ofp_v1_0.Port_mod_mask_get
    if _newclass:mask = _swig_property(_flog_ofp_v1_0.Port_mod_mask_get, _flog_ofp_v1_0.Port_mod_mask_set)
    __swig_setmethods__["advertise"] = _flog_ofp_v1_0.Port_mod_advertise_set
    __swig_getmethods__["advertise"] = _flog_ofp_v1_0.Port_mod_advertise_get
    if _newclass:advertise = _swig_property(_flog_ofp_v1_0.Port_mod_advertise_get, _flog_ofp_v1_0.Port_mod_advertise_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Port_mod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Port_mod
    __del__ = lambda self : None;
Port_mod_swigregister = _flog_ofp_v1_0.Port_mod_swigregister
Port_mod_swigregister(Port_mod)

class Port_status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Port_status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Port_status, name)
    __repr__ = _swig_repr
    ADD = _flog_ofp_v1_0.Port_status_ADD
    DELETE = _flog_ofp_v1_0.Port_status_DELETE
    MODIFY = _flog_ofp_v1_0.Port_status_MODIFY
    __swig_setmethods__["reason"] = _flog_ofp_v1_0.Port_status_reason_set
    __swig_getmethods__["reason"] = _flog_ofp_v1_0.Port_status_reason_get
    if _newclass:reason = _swig_property(_flog_ofp_v1_0.Port_status_reason_get, _flog_ofp_v1_0.Port_status_reason_set)
    __swig_setmethods__["port"] = _flog_ofp_v1_0.Port_status_port_set
    __swig_getmethods__["port"] = _flog_ofp_v1_0.Port_status_port_get
    if _newclass:port = _swig_property(_flog_ofp_v1_0.Port_status_port_get, _flog_ofp_v1_0.Port_status_port_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Port_status()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Port_status
    __del__ = lambda self : None;
Port_status_swigregister = _flog_ofp_v1_0.Port_status_swigregister
Port_status_swigregister(Port_status)

class Stats_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_header, name)
    __repr__ = _swig_repr
    MORE = _flog_ofp_v1_0.Stats_header_MORE
    __swig_setmethods__["type"] = _flog_ofp_v1_0.Stats_header_type_set
    __swig_getmethods__["type"] = _flog_ofp_v1_0.Stats_header_type_get
    if _newclass:type = _swig_property(_flog_ofp_v1_0.Stats_header_type_get, _flog_ofp_v1_0.Stats_header_type_set)
    __swig_setmethods__["flags"] = _flog_ofp_v1_0.Stats_header_flags_set
    __swig_getmethods__["flags"] = _flog_ofp_v1_0.Stats_header_flags_get
    if _newclass:flags = _swig_property(_flog_ofp_v1_0.Stats_header_flags_get, _flog_ofp_v1_0.Stats_header_flags_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_header
    __del__ = lambda self : None;
Stats_header_swigregister = _flog_ofp_v1_0.Stats_header_swigregister
Stats_header_swigregister(Stats_header)

class Stats_req_desc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_req_desc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_req_desc, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_req_desc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_req_desc
    __del__ = lambda self : None;
Stats_req_desc_swigregister = _flog_ofp_v1_0.Stats_req_desc_swigregister
Stats_req_desc_swigregister(Stats_req_desc)

class Stats_req_flow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_req_flow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_req_flow, name)
    __repr__ = _swig_repr
    __swig_setmethods__["match"] = _flog_ofp_v1_0.Stats_req_flow_match_set
    __swig_getmethods__["match"] = _flog_ofp_v1_0.Stats_req_flow_match_get
    if _newclass:match = _swig_property(_flog_ofp_v1_0.Stats_req_flow_match_get, _flog_ofp_v1_0.Stats_req_flow_match_set)
    __swig_setmethods__["table_id"] = _flog_ofp_v1_0.Stats_req_flow_table_id_set
    __swig_getmethods__["table_id"] = _flog_ofp_v1_0.Stats_req_flow_table_id_get
    if _newclass:table_id = _swig_property(_flog_ofp_v1_0.Stats_req_flow_table_id_get, _flog_ofp_v1_0.Stats_req_flow_table_id_set)
    __swig_setmethods__["out_port"] = _flog_ofp_v1_0.Stats_req_flow_out_port_set
    __swig_getmethods__["out_port"] = _flog_ofp_v1_0.Stats_req_flow_out_port_get
    if _newclass:out_port = _swig_property(_flog_ofp_v1_0.Stats_req_flow_out_port_get, _flog_ofp_v1_0.Stats_req_flow_out_port_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_req_flow()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_req_flow
    __del__ = lambda self : None;
Stats_req_flow_swigregister = _flog_ofp_v1_0.Stats_req_flow_swigregister
Stats_req_flow_swigregister(Stats_req_flow)

class Stats_req_aggregate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_req_aggregate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_req_aggregate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["match"] = _flog_ofp_v1_0.Stats_req_aggregate_match_set
    __swig_getmethods__["match"] = _flog_ofp_v1_0.Stats_req_aggregate_match_get
    if _newclass:match = _swig_property(_flog_ofp_v1_0.Stats_req_aggregate_match_get, _flog_ofp_v1_0.Stats_req_aggregate_match_set)
    __swig_setmethods__["table_id"] = _flog_ofp_v1_0.Stats_req_aggregate_table_id_set
    __swig_getmethods__["table_id"] = _flog_ofp_v1_0.Stats_req_aggregate_table_id_get
    if _newclass:table_id = _swig_property(_flog_ofp_v1_0.Stats_req_aggregate_table_id_get, _flog_ofp_v1_0.Stats_req_aggregate_table_id_set)
    __swig_setmethods__["out_port"] = _flog_ofp_v1_0.Stats_req_aggregate_out_port_set
    __swig_getmethods__["out_port"] = _flog_ofp_v1_0.Stats_req_aggregate_out_port_get
    if _newclass:out_port = _swig_property(_flog_ofp_v1_0.Stats_req_aggregate_out_port_get, _flog_ofp_v1_0.Stats_req_aggregate_out_port_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_req_aggregate()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_req_aggregate
    __del__ = lambda self : None;
Stats_req_aggregate_swigregister = _flog_ofp_v1_0.Stats_req_aggregate_swigregister
Stats_req_aggregate_swigregister(Stats_req_aggregate)

class Stats_req_table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_req_table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_req_table, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_req_table()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_req_table
    __del__ = lambda self : None;
Stats_req_table_swigregister = _flog_ofp_v1_0.Stats_req_table_swigregister
Stats_req_table_swigregister(Stats_req_table)

class Stats_req_port(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_req_port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_req_port, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _flog_ofp_v1_0.Stats_req_port_port_no_set
    __swig_getmethods__["port_no"] = _flog_ofp_v1_0.Stats_req_port_port_no_get
    if _newclass:port_no = _swig_property(_flog_ofp_v1_0.Stats_req_port_port_no_get, _flog_ofp_v1_0.Stats_req_port_port_no_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_req_port()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_req_port
    __del__ = lambda self : None;
Stats_req_port_swigregister = _flog_ofp_v1_0.Stats_req_port_swigregister
Stats_req_port_swigregister(Stats_req_port)

class Stats_req_queue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_req_queue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_req_queue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _flog_ofp_v1_0.Stats_req_queue_port_no_set
    __swig_getmethods__["port_no"] = _flog_ofp_v1_0.Stats_req_queue_port_no_get
    if _newclass:port_no = _swig_property(_flog_ofp_v1_0.Stats_req_queue_port_no_get, _flog_ofp_v1_0.Stats_req_queue_port_no_set)
    __swig_setmethods__["queue_id"] = _flog_ofp_v1_0.Stats_req_queue_queue_id_set
    __swig_getmethods__["queue_id"] = _flog_ofp_v1_0.Stats_req_queue_queue_id_get
    if _newclass:queue_id = _swig_property(_flog_ofp_v1_0.Stats_req_queue_queue_id_get, _flog_ofp_v1_0.Stats_req_queue_queue_id_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_req_queue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_req_queue
    __del__ = lambda self : None;
Stats_req_queue_swigregister = _flog_ofp_v1_0.Stats_req_queue_swigregister
Stats_req_queue_swigregister(Stats_req_queue)

class Stats_req_vendor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_req_vendor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_req_vendor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vendor_id"] = _flog_ofp_v1_0.Stats_req_vendor_vendor_id_set
    __swig_getmethods__["vendor_id"] = _flog_ofp_v1_0.Stats_req_vendor_vendor_id_get
    if _newclass:vendor_id = _swig_property(_flog_ofp_v1_0.Stats_req_vendor_vendor_id_get, _flog_ofp_v1_0.Stats_req_vendor_vendor_id_set)
    __swig_setmethods__["data"] = _flog_ofp_v1_0.Stats_req_vendor_data_set
    __swig_getmethods__["data"] = _flog_ofp_v1_0.Stats_req_vendor_data_get
    if _newclass:data = _swig_property(_flog_ofp_v1_0.Stats_req_vendor_data_get, _flog_ofp_v1_0.Stats_req_vendor_data_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_req_vendor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_req_vendor
    __del__ = lambda self : None;
Stats_req_vendor_swigregister = _flog_ofp_v1_0.Stats_req_vendor_swigregister
Stats_req_vendor_swigregister(Stats_req_vendor)

class Stats_req_payload_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_req_payload_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_req_payload_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["desc"] = _flog_ofp_v1_0.Stats_req_payload_data_desc_set
    __swig_getmethods__["desc"] = _flog_ofp_v1_0.Stats_req_payload_data_desc_get
    if _newclass:desc = _swig_property(_flog_ofp_v1_0.Stats_req_payload_data_desc_get, _flog_ofp_v1_0.Stats_req_payload_data_desc_set)
    __swig_setmethods__["flow"] = _flog_ofp_v1_0.Stats_req_payload_data_flow_set
    __swig_getmethods__["flow"] = _flog_ofp_v1_0.Stats_req_payload_data_flow_get
    if _newclass:flow = _swig_property(_flog_ofp_v1_0.Stats_req_payload_data_flow_get, _flog_ofp_v1_0.Stats_req_payload_data_flow_set)
    __swig_setmethods__["aggr"] = _flog_ofp_v1_0.Stats_req_payload_data_aggr_set
    __swig_getmethods__["aggr"] = _flog_ofp_v1_0.Stats_req_payload_data_aggr_get
    if _newclass:aggr = _swig_property(_flog_ofp_v1_0.Stats_req_payload_data_aggr_get, _flog_ofp_v1_0.Stats_req_payload_data_aggr_set)
    __swig_setmethods__["table"] = _flog_ofp_v1_0.Stats_req_payload_data_table_set
    __swig_getmethods__["table"] = _flog_ofp_v1_0.Stats_req_payload_data_table_get
    if _newclass:table = _swig_property(_flog_ofp_v1_0.Stats_req_payload_data_table_get, _flog_ofp_v1_0.Stats_req_payload_data_table_set)
    __swig_setmethods__["port"] = _flog_ofp_v1_0.Stats_req_payload_data_port_set
    __swig_getmethods__["port"] = _flog_ofp_v1_0.Stats_req_payload_data_port_get
    if _newclass:port = _swig_property(_flog_ofp_v1_0.Stats_req_payload_data_port_get, _flog_ofp_v1_0.Stats_req_payload_data_port_set)
    __swig_setmethods__["queue"] = _flog_ofp_v1_0.Stats_req_payload_data_queue_set
    __swig_getmethods__["queue"] = _flog_ofp_v1_0.Stats_req_payload_data_queue_get
    if _newclass:queue = _swig_property(_flog_ofp_v1_0.Stats_req_payload_data_queue_get, _flog_ofp_v1_0.Stats_req_payload_data_queue_set)
    __swig_setmethods__["vendor"] = _flog_ofp_v1_0.Stats_req_payload_data_vendor_set
    __swig_getmethods__["vendor"] = _flog_ofp_v1_0.Stats_req_payload_data_vendor_get
    if _newclass:vendor = _swig_property(_flog_ofp_v1_0.Stats_req_payload_data_vendor_get, _flog_ofp_v1_0.Stats_req_payload_data_vendor_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_req_payload_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_req_payload_data
    __del__ = lambda self : None;
Stats_req_payload_data_swigregister = _flog_ofp_v1_0.Stats_req_payload_data_swigregister
Stats_req_payload_data_swigregister(Stats_req_payload_data)

class Stats_req_payload(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_req_payload, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_req_payload, name)
    __repr__ = _swig_repr
    __swig_setmethods__["init"] = _flog_ofp_v1_0.Stats_req_payload_init_set
    __swig_getmethods__["init"] = _flog_ofp_v1_0.Stats_req_payload_init_get
    if _newclass:init = _swig_property(_flog_ofp_v1_0.Stats_req_payload_init_get, _flog_ofp_v1_0.Stats_req_payload_init_set)
    __swig_getmethods__["data"] = _flog_ofp_v1_0.Stats_req_payload_data_get
    if _newclass:data = _swig_property(_flog_ofp_v1_0.Stats_req_payload_data_get)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_req_payload()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_req_payload
    __del__ = lambda self : None;
Stats_req_payload_swigregister = _flog_ofp_v1_0.Stats_req_payload_swigregister
Stats_req_payload_swigregister(Stats_req_payload)

class Stats_req(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_req, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_req, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _flog_ofp_v1_0.Stats_req_header_set
    __swig_getmethods__["header"] = _flog_ofp_v1_0.Stats_req_header_get
    if _newclass:header = _swig_property(_flog_ofp_v1_0.Stats_req_header_get, _flog_ofp_v1_0.Stats_req_header_set)
    __swig_getmethods__["payload"] = _flog_ofp_v1_0.Stats_req_payload_get
    if _newclass:payload = _swig_property(_flog_ofp_v1_0.Stats_req_payload_get)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_req()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_req
    __del__ = lambda self : None;
Stats_req_swigregister = _flog_ofp_v1_0.Stats_req_swigregister
Stats_req_swigregister(Stats_req)

class Stats_res_desc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_res_desc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_res_desc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mfr_desc"] = _flog_ofp_v1_0.Stats_res_desc_mfr_desc_set
    __swig_getmethods__["mfr_desc"] = _flog_ofp_v1_0.Stats_res_desc_mfr_desc_get
    if _newclass:mfr_desc = _swig_property(_flog_ofp_v1_0.Stats_res_desc_mfr_desc_get, _flog_ofp_v1_0.Stats_res_desc_mfr_desc_set)
    __swig_setmethods__["hw_desc"] = _flog_ofp_v1_0.Stats_res_desc_hw_desc_set
    __swig_getmethods__["hw_desc"] = _flog_ofp_v1_0.Stats_res_desc_hw_desc_get
    if _newclass:hw_desc = _swig_property(_flog_ofp_v1_0.Stats_res_desc_hw_desc_get, _flog_ofp_v1_0.Stats_res_desc_hw_desc_set)
    __swig_setmethods__["sw_desc"] = _flog_ofp_v1_0.Stats_res_desc_sw_desc_set
    __swig_getmethods__["sw_desc"] = _flog_ofp_v1_0.Stats_res_desc_sw_desc_get
    if _newclass:sw_desc = _swig_property(_flog_ofp_v1_0.Stats_res_desc_sw_desc_get, _flog_ofp_v1_0.Stats_res_desc_sw_desc_set)
    __swig_setmethods__["serial_num"] = _flog_ofp_v1_0.Stats_res_desc_serial_num_set
    __swig_getmethods__["serial_num"] = _flog_ofp_v1_0.Stats_res_desc_serial_num_get
    if _newclass:serial_num = _swig_property(_flog_ofp_v1_0.Stats_res_desc_serial_num_get, _flog_ofp_v1_0.Stats_res_desc_serial_num_set)
    __swig_setmethods__["dp_desc"] = _flog_ofp_v1_0.Stats_res_desc_dp_desc_set
    __swig_getmethods__["dp_desc"] = _flog_ofp_v1_0.Stats_res_desc_dp_desc_get
    if _newclass:dp_desc = _swig_property(_flog_ofp_v1_0.Stats_res_desc_dp_desc_get, _flog_ofp_v1_0.Stats_res_desc_dp_desc_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_res_desc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_res_desc
    __del__ = lambda self : None;
Stats_res_desc_swigregister = _flog_ofp_v1_0.Stats_res_desc_swigregister
Stats_res_desc_swigregister(Stats_res_desc)

class Stats_res_flow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_res_flow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_res_flow, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _flog_ofp_v1_0.Stats_res_flow_length_set
    __swig_getmethods__["length"] = _flog_ofp_v1_0.Stats_res_flow_length_get
    if _newclass:length = _swig_property(_flog_ofp_v1_0.Stats_res_flow_length_get, _flog_ofp_v1_0.Stats_res_flow_length_set)
    __swig_setmethods__["table_id"] = _flog_ofp_v1_0.Stats_res_flow_table_id_set
    __swig_getmethods__["table_id"] = _flog_ofp_v1_0.Stats_res_flow_table_id_get
    if _newclass:table_id = _swig_property(_flog_ofp_v1_0.Stats_res_flow_table_id_get, _flog_ofp_v1_0.Stats_res_flow_table_id_set)
    __swig_setmethods__["match"] = _flog_ofp_v1_0.Stats_res_flow_match_set
    __swig_getmethods__["match"] = _flog_ofp_v1_0.Stats_res_flow_match_get
    if _newclass:match = _swig_property(_flog_ofp_v1_0.Stats_res_flow_match_get, _flog_ofp_v1_0.Stats_res_flow_match_set)
    __swig_setmethods__["duration_sec"] = _flog_ofp_v1_0.Stats_res_flow_duration_sec_set
    __swig_getmethods__["duration_sec"] = _flog_ofp_v1_0.Stats_res_flow_duration_sec_get
    if _newclass:duration_sec = _swig_property(_flog_ofp_v1_0.Stats_res_flow_duration_sec_get, _flog_ofp_v1_0.Stats_res_flow_duration_sec_set)
    __swig_setmethods__["duration_nsec"] = _flog_ofp_v1_0.Stats_res_flow_duration_nsec_set
    __swig_getmethods__["duration_nsec"] = _flog_ofp_v1_0.Stats_res_flow_duration_nsec_get
    if _newclass:duration_nsec = _swig_property(_flog_ofp_v1_0.Stats_res_flow_duration_nsec_get, _flog_ofp_v1_0.Stats_res_flow_duration_nsec_set)
    __swig_setmethods__["priority"] = _flog_ofp_v1_0.Stats_res_flow_priority_set
    __swig_getmethods__["priority"] = _flog_ofp_v1_0.Stats_res_flow_priority_get
    if _newclass:priority = _swig_property(_flog_ofp_v1_0.Stats_res_flow_priority_get, _flog_ofp_v1_0.Stats_res_flow_priority_set)
    __swig_setmethods__["idle_timeout"] = _flog_ofp_v1_0.Stats_res_flow_idle_timeout_set
    __swig_getmethods__["idle_timeout"] = _flog_ofp_v1_0.Stats_res_flow_idle_timeout_get
    if _newclass:idle_timeout = _swig_property(_flog_ofp_v1_0.Stats_res_flow_idle_timeout_get, _flog_ofp_v1_0.Stats_res_flow_idle_timeout_set)
    __swig_setmethods__["hard_timeout"] = _flog_ofp_v1_0.Stats_res_flow_hard_timeout_set
    __swig_getmethods__["hard_timeout"] = _flog_ofp_v1_0.Stats_res_flow_hard_timeout_get
    if _newclass:hard_timeout = _swig_property(_flog_ofp_v1_0.Stats_res_flow_hard_timeout_get, _flog_ofp_v1_0.Stats_res_flow_hard_timeout_set)
    __swig_setmethods__["cookie"] = _flog_ofp_v1_0.Stats_res_flow_cookie_set
    __swig_getmethods__["cookie"] = _flog_ofp_v1_0.Stats_res_flow_cookie_get
    if _newclass:cookie = _swig_property(_flog_ofp_v1_0.Stats_res_flow_cookie_get, _flog_ofp_v1_0.Stats_res_flow_cookie_set)
    __swig_setmethods__["packet_count"] = _flog_ofp_v1_0.Stats_res_flow_packet_count_set
    __swig_getmethods__["packet_count"] = _flog_ofp_v1_0.Stats_res_flow_packet_count_get
    if _newclass:packet_count = _swig_property(_flog_ofp_v1_0.Stats_res_flow_packet_count_get, _flog_ofp_v1_0.Stats_res_flow_packet_count_set)
    __swig_setmethods__["byte_count"] = _flog_ofp_v1_0.Stats_res_flow_byte_count_set
    __swig_getmethods__["byte_count"] = _flog_ofp_v1_0.Stats_res_flow_byte_count_get
    if _newclass:byte_count = _swig_property(_flog_ofp_v1_0.Stats_res_flow_byte_count_get, _flog_ofp_v1_0.Stats_res_flow_byte_count_set)
    __swig_setmethods__["actions"] = _flog_ofp_v1_0.Stats_res_flow_actions_set
    __swig_getmethods__["actions"] = _flog_ofp_v1_0.Stats_res_flow_actions_get
    if _newclass:actions = _swig_property(_flog_ofp_v1_0.Stats_res_flow_actions_get, _flog_ofp_v1_0.Stats_res_flow_actions_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_res_flow()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_res_flow
    __del__ = lambda self : None;
Stats_res_flow_swigregister = _flog_ofp_v1_0.Stats_res_flow_swigregister
Stats_res_flow_swigregister(Stats_res_flow)

class Stats_res_aggregate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_res_aggregate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_res_aggregate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["packet_count"] = _flog_ofp_v1_0.Stats_res_aggregate_packet_count_set
    __swig_getmethods__["packet_count"] = _flog_ofp_v1_0.Stats_res_aggregate_packet_count_get
    if _newclass:packet_count = _swig_property(_flog_ofp_v1_0.Stats_res_aggregate_packet_count_get, _flog_ofp_v1_0.Stats_res_aggregate_packet_count_set)
    __swig_setmethods__["byte_count"] = _flog_ofp_v1_0.Stats_res_aggregate_byte_count_set
    __swig_getmethods__["byte_count"] = _flog_ofp_v1_0.Stats_res_aggregate_byte_count_get
    if _newclass:byte_count = _swig_property(_flog_ofp_v1_0.Stats_res_aggregate_byte_count_get, _flog_ofp_v1_0.Stats_res_aggregate_byte_count_set)
    __swig_setmethods__["flow_count"] = _flog_ofp_v1_0.Stats_res_aggregate_flow_count_set
    __swig_getmethods__["flow_count"] = _flog_ofp_v1_0.Stats_res_aggregate_flow_count_get
    if _newclass:flow_count = _swig_property(_flog_ofp_v1_0.Stats_res_aggregate_flow_count_get, _flog_ofp_v1_0.Stats_res_aggregate_flow_count_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_res_aggregate()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_res_aggregate
    __del__ = lambda self : None;
Stats_res_aggregate_swigregister = _flog_ofp_v1_0.Stats_res_aggregate_swigregister
Stats_res_aggregate_swigregister(Stats_res_aggregate)

class Stats_res_table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_res_table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_res_table, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table_id"] = _flog_ofp_v1_0.Stats_res_table_table_id_set
    __swig_getmethods__["table_id"] = _flog_ofp_v1_0.Stats_res_table_table_id_get
    if _newclass:table_id = _swig_property(_flog_ofp_v1_0.Stats_res_table_table_id_get, _flog_ofp_v1_0.Stats_res_table_table_id_set)
    __swig_setmethods__["name"] = _flog_ofp_v1_0.Stats_res_table_name_set
    __swig_getmethods__["name"] = _flog_ofp_v1_0.Stats_res_table_name_get
    if _newclass:name = _swig_property(_flog_ofp_v1_0.Stats_res_table_name_get, _flog_ofp_v1_0.Stats_res_table_name_set)
    __swig_setmethods__["wildcards"] = _flog_ofp_v1_0.Stats_res_table_wildcards_set
    __swig_getmethods__["wildcards"] = _flog_ofp_v1_0.Stats_res_table_wildcards_get
    if _newclass:wildcards = _swig_property(_flog_ofp_v1_0.Stats_res_table_wildcards_get, _flog_ofp_v1_0.Stats_res_table_wildcards_set)
    __swig_setmethods__["max_entries"] = _flog_ofp_v1_0.Stats_res_table_max_entries_set
    __swig_getmethods__["max_entries"] = _flog_ofp_v1_0.Stats_res_table_max_entries_get
    if _newclass:max_entries = _swig_property(_flog_ofp_v1_0.Stats_res_table_max_entries_get, _flog_ofp_v1_0.Stats_res_table_max_entries_set)
    __swig_setmethods__["active_count"] = _flog_ofp_v1_0.Stats_res_table_active_count_set
    __swig_getmethods__["active_count"] = _flog_ofp_v1_0.Stats_res_table_active_count_get
    if _newclass:active_count = _swig_property(_flog_ofp_v1_0.Stats_res_table_active_count_get, _flog_ofp_v1_0.Stats_res_table_active_count_set)
    __swig_setmethods__["lookup_count"] = _flog_ofp_v1_0.Stats_res_table_lookup_count_set
    __swig_getmethods__["lookup_count"] = _flog_ofp_v1_0.Stats_res_table_lookup_count_get
    if _newclass:lookup_count = _swig_property(_flog_ofp_v1_0.Stats_res_table_lookup_count_get, _flog_ofp_v1_0.Stats_res_table_lookup_count_set)
    __swig_setmethods__["matched_count"] = _flog_ofp_v1_0.Stats_res_table_matched_count_set
    __swig_getmethods__["matched_count"] = _flog_ofp_v1_0.Stats_res_table_matched_count_get
    if _newclass:matched_count = _swig_property(_flog_ofp_v1_0.Stats_res_table_matched_count_get, _flog_ofp_v1_0.Stats_res_table_matched_count_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_res_table()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_res_table
    __del__ = lambda self : None;
Stats_res_table_swigregister = _flog_ofp_v1_0.Stats_res_table_swigregister
Stats_res_table_swigregister(Stats_res_table)

class Stats_res_port(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_res_port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_res_port, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _flog_ofp_v1_0.Stats_res_port_port_no_set
    __swig_getmethods__["port_no"] = _flog_ofp_v1_0.Stats_res_port_port_no_get
    if _newclass:port_no = _swig_property(_flog_ofp_v1_0.Stats_res_port_port_no_get, _flog_ofp_v1_0.Stats_res_port_port_no_set)
    __swig_setmethods__["rx_packets"] = _flog_ofp_v1_0.Stats_res_port_rx_packets_set
    __swig_getmethods__["rx_packets"] = _flog_ofp_v1_0.Stats_res_port_rx_packets_get
    if _newclass:rx_packets = _swig_property(_flog_ofp_v1_0.Stats_res_port_rx_packets_get, _flog_ofp_v1_0.Stats_res_port_rx_packets_set)
    __swig_setmethods__["tx_packets"] = _flog_ofp_v1_0.Stats_res_port_tx_packets_set
    __swig_getmethods__["tx_packets"] = _flog_ofp_v1_0.Stats_res_port_tx_packets_get
    if _newclass:tx_packets = _swig_property(_flog_ofp_v1_0.Stats_res_port_tx_packets_get, _flog_ofp_v1_0.Stats_res_port_tx_packets_set)
    __swig_setmethods__["rx_bytes"] = _flog_ofp_v1_0.Stats_res_port_rx_bytes_set
    __swig_getmethods__["rx_bytes"] = _flog_ofp_v1_0.Stats_res_port_rx_bytes_get
    if _newclass:rx_bytes = _swig_property(_flog_ofp_v1_0.Stats_res_port_rx_bytes_get, _flog_ofp_v1_0.Stats_res_port_rx_bytes_set)
    __swig_setmethods__["tx_bytes"] = _flog_ofp_v1_0.Stats_res_port_tx_bytes_set
    __swig_getmethods__["tx_bytes"] = _flog_ofp_v1_0.Stats_res_port_tx_bytes_get
    if _newclass:tx_bytes = _swig_property(_flog_ofp_v1_0.Stats_res_port_tx_bytes_get, _flog_ofp_v1_0.Stats_res_port_tx_bytes_set)
    __swig_setmethods__["rx_dropped"] = _flog_ofp_v1_0.Stats_res_port_rx_dropped_set
    __swig_getmethods__["rx_dropped"] = _flog_ofp_v1_0.Stats_res_port_rx_dropped_get
    if _newclass:rx_dropped = _swig_property(_flog_ofp_v1_0.Stats_res_port_rx_dropped_get, _flog_ofp_v1_0.Stats_res_port_rx_dropped_set)
    __swig_setmethods__["tx_dropped"] = _flog_ofp_v1_0.Stats_res_port_tx_dropped_set
    __swig_getmethods__["tx_dropped"] = _flog_ofp_v1_0.Stats_res_port_tx_dropped_get
    if _newclass:tx_dropped = _swig_property(_flog_ofp_v1_0.Stats_res_port_tx_dropped_get, _flog_ofp_v1_0.Stats_res_port_tx_dropped_set)
    __swig_setmethods__["rx_errors"] = _flog_ofp_v1_0.Stats_res_port_rx_errors_set
    __swig_getmethods__["rx_errors"] = _flog_ofp_v1_0.Stats_res_port_rx_errors_get
    if _newclass:rx_errors = _swig_property(_flog_ofp_v1_0.Stats_res_port_rx_errors_get, _flog_ofp_v1_0.Stats_res_port_rx_errors_set)
    __swig_setmethods__["tx_errors"] = _flog_ofp_v1_0.Stats_res_port_tx_errors_set
    __swig_getmethods__["tx_errors"] = _flog_ofp_v1_0.Stats_res_port_tx_errors_get
    if _newclass:tx_errors = _swig_property(_flog_ofp_v1_0.Stats_res_port_tx_errors_get, _flog_ofp_v1_0.Stats_res_port_tx_errors_set)
    __swig_setmethods__["rx_frame_err"] = _flog_ofp_v1_0.Stats_res_port_rx_frame_err_set
    __swig_getmethods__["rx_frame_err"] = _flog_ofp_v1_0.Stats_res_port_rx_frame_err_get
    if _newclass:rx_frame_err = _swig_property(_flog_ofp_v1_0.Stats_res_port_rx_frame_err_get, _flog_ofp_v1_0.Stats_res_port_rx_frame_err_set)
    __swig_setmethods__["rx_over_err"] = _flog_ofp_v1_0.Stats_res_port_rx_over_err_set
    __swig_getmethods__["rx_over_err"] = _flog_ofp_v1_0.Stats_res_port_rx_over_err_get
    if _newclass:rx_over_err = _swig_property(_flog_ofp_v1_0.Stats_res_port_rx_over_err_get, _flog_ofp_v1_0.Stats_res_port_rx_over_err_set)
    __swig_setmethods__["rx_crc_err"] = _flog_ofp_v1_0.Stats_res_port_rx_crc_err_set
    __swig_getmethods__["rx_crc_err"] = _flog_ofp_v1_0.Stats_res_port_rx_crc_err_get
    if _newclass:rx_crc_err = _swig_property(_flog_ofp_v1_0.Stats_res_port_rx_crc_err_get, _flog_ofp_v1_0.Stats_res_port_rx_crc_err_set)
    __swig_setmethods__["collisions"] = _flog_ofp_v1_0.Stats_res_port_collisions_set
    __swig_getmethods__["collisions"] = _flog_ofp_v1_0.Stats_res_port_collisions_get
    if _newclass:collisions = _swig_property(_flog_ofp_v1_0.Stats_res_port_collisions_get, _flog_ofp_v1_0.Stats_res_port_collisions_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_res_port()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_res_port
    __del__ = lambda self : None;
Stats_res_port_swigregister = _flog_ofp_v1_0.Stats_res_port_swigregister
Stats_res_port_swigregister(Stats_res_port)

class Stats_res_queue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_res_queue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_res_queue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port_no"] = _flog_ofp_v1_0.Stats_res_queue_port_no_set
    __swig_getmethods__["port_no"] = _flog_ofp_v1_0.Stats_res_queue_port_no_get
    if _newclass:port_no = _swig_property(_flog_ofp_v1_0.Stats_res_queue_port_no_get, _flog_ofp_v1_0.Stats_res_queue_port_no_set)
    __swig_setmethods__["queue_id"] = _flog_ofp_v1_0.Stats_res_queue_queue_id_set
    __swig_getmethods__["queue_id"] = _flog_ofp_v1_0.Stats_res_queue_queue_id_get
    if _newclass:queue_id = _swig_property(_flog_ofp_v1_0.Stats_res_queue_queue_id_get, _flog_ofp_v1_0.Stats_res_queue_queue_id_set)
    __swig_setmethods__["tx_bytes"] = _flog_ofp_v1_0.Stats_res_queue_tx_bytes_set
    __swig_getmethods__["tx_bytes"] = _flog_ofp_v1_0.Stats_res_queue_tx_bytes_get
    if _newclass:tx_bytes = _swig_property(_flog_ofp_v1_0.Stats_res_queue_tx_bytes_get, _flog_ofp_v1_0.Stats_res_queue_tx_bytes_set)
    __swig_setmethods__["tx_packets"] = _flog_ofp_v1_0.Stats_res_queue_tx_packets_set
    __swig_getmethods__["tx_packets"] = _flog_ofp_v1_0.Stats_res_queue_tx_packets_get
    if _newclass:tx_packets = _swig_property(_flog_ofp_v1_0.Stats_res_queue_tx_packets_get, _flog_ofp_v1_0.Stats_res_queue_tx_packets_set)
    __swig_setmethods__["tx_errors"] = _flog_ofp_v1_0.Stats_res_queue_tx_errors_set
    __swig_getmethods__["tx_errors"] = _flog_ofp_v1_0.Stats_res_queue_tx_errors_get
    if _newclass:tx_errors = _swig_property(_flog_ofp_v1_0.Stats_res_queue_tx_errors_get, _flog_ofp_v1_0.Stats_res_queue_tx_errors_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_res_queue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_res_queue
    __del__ = lambda self : None;
Stats_res_queue_swigregister = _flog_ofp_v1_0.Stats_res_queue_swigregister
Stats_res_queue_swigregister(Stats_res_queue)

class Stats_res_vendor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_res_vendor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_res_vendor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vendor_id"] = _flog_ofp_v1_0.Stats_res_vendor_vendor_id_set
    __swig_getmethods__["vendor_id"] = _flog_ofp_v1_0.Stats_res_vendor_vendor_id_get
    if _newclass:vendor_id = _swig_property(_flog_ofp_v1_0.Stats_res_vendor_vendor_id_get, _flog_ofp_v1_0.Stats_res_vendor_vendor_id_set)
    __swig_setmethods__["data"] = _flog_ofp_v1_0.Stats_res_vendor_data_set
    __swig_getmethods__["data"] = _flog_ofp_v1_0.Stats_res_vendor_data_get
    if _newclass:data = _swig_property(_flog_ofp_v1_0.Stats_res_vendor_data_get, _flog_ofp_v1_0.Stats_res_vendor_data_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_res_vendor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_res_vendor
    __del__ = lambda self : None;
Stats_res_vendor_swigregister = _flog_ofp_v1_0.Stats_res_vendor_swigregister
Stats_res_vendor_swigregister(Stats_res_vendor)

class Stats_res_flows(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_res_flows, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_res_flows, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flows"] = _flog_ofp_v1_0.Stats_res_flows_flows_set
    __swig_getmethods__["flows"] = _flog_ofp_v1_0.Stats_res_flows_flows_get
    if _newclass:flows = _swig_property(_flog_ofp_v1_0.Stats_res_flows_flows_get, _flog_ofp_v1_0.Stats_res_flows_flows_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_res_flows()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_res_flows
    __del__ = lambda self : None;
Stats_res_flows_swigregister = _flog_ofp_v1_0.Stats_res_flows_swigregister
Stats_res_flows_swigregister(Stats_res_flows)

class Stats_res_tables(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_res_tables, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_res_tables, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tables"] = _flog_ofp_v1_0.Stats_res_tables_tables_set
    __swig_getmethods__["tables"] = _flog_ofp_v1_0.Stats_res_tables_tables_get
    if _newclass:tables = _swig_property(_flog_ofp_v1_0.Stats_res_tables_tables_get, _flog_ofp_v1_0.Stats_res_tables_tables_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_res_tables()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_res_tables
    __del__ = lambda self : None;
Stats_res_tables_swigregister = _flog_ofp_v1_0.Stats_res_tables_swigregister
Stats_res_tables_swigregister(Stats_res_tables)

class Stats_res_ports(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_res_ports, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_res_ports, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ports"] = _flog_ofp_v1_0.Stats_res_ports_ports_set
    __swig_getmethods__["ports"] = _flog_ofp_v1_0.Stats_res_ports_ports_get
    if _newclass:ports = _swig_property(_flog_ofp_v1_0.Stats_res_ports_ports_get, _flog_ofp_v1_0.Stats_res_ports_ports_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_res_ports()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_res_ports
    __del__ = lambda self : None;
Stats_res_ports_swigregister = _flog_ofp_v1_0.Stats_res_ports_swigregister
Stats_res_ports_swigregister(Stats_res_ports)

class Stats_res_queues(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_res_queues, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_res_queues, name)
    __repr__ = _swig_repr
    __swig_setmethods__["queues"] = _flog_ofp_v1_0.Stats_res_queues_queues_set
    __swig_getmethods__["queues"] = _flog_ofp_v1_0.Stats_res_queues_queues_get
    if _newclass:queues = _swig_property(_flog_ofp_v1_0.Stats_res_queues_queues_get, _flog_ofp_v1_0.Stats_res_queues_queues_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_res_queues()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_res_queues
    __del__ = lambda self : None;
Stats_res_queues_swigregister = _flog_ofp_v1_0.Stats_res_queues_swigregister
Stats_res_queues_swigregister(Stats_res_queues)

class Stats_res_payload_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_res_payload_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_res_payload_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["desc"] = _flog_ofp_v1_0.Stats_res_payload_data_desc_set
    __swig_getmethods__["desc"] = _flog_ofp_v1_0.Stats_res_payload_data_desc_get
    if _newclass:desc = _swig_property(_flog_ofp_v1_0.Stats_res_payload_data_desc_get, _flog_ofp_v1_0.Stats_res_payload_data_desc_set)
    __swig_setmethods__["flow"] = _flog_ofp_v1_0.Stats_res_payload_data_flow_set
    __swig_getmethods__["flow"] = _flog_ofp_v1_0.Stats_res_payload_data_flow_get
    if _newclass:flow = _swig_property(_flog_ofp_v1_0.Stats_res_payload_data_flow_get, _flog_ofp_v1_0.Stats_res_payload_data_flow_set)
    __swig_setmethods__["aggr"] = _flog_ofp_v1_0.Stats_res_payload_data_aggr_set
    __swig_getmethods__["aggr"] = _flog_ofp_v1_0.Stats_res_payload_data_aggr_get
    if _newclass:aggr = _swig_property(_flog_ofp_v1_0.Stats_res_payload_data_aggr_get, _flog_ofp_v1_0.Stats_res_payload_data_aggr_set)
    __swig_setmethods__["table"] = _flog_ofp_v1_0.Stats_res_payload_data_table_set
    __swig_getmethods__["table"] = _flog_ofp_v1_0.Stats_res_payload_data_table_get
    if _newclass:table = _swig_property(_flog_ofp_v1_0.Stats_res_payload_data_table_get, _flog_ofp_v1_0.Stats_res_payload_data_table_set)
    __swig_setmethods__["port"] = _flog_ofp_v1_0.Stats_res_payload_data_port_set
    __swig_getmethods__["port"] = _flog_ofp_v1_0.Stats_res_payload_data_port_get
    if _newclass:port = _swig_property(_flog_ofp_v1_0.Stats_res_payload_data_port_get, _flog_ofp_v1_0.Stats_res_payload_data_port_set)
    __swig_setmethods__["queue"] = _flog_ofp_v1_0.Stats_res_payload_data_queue_set
    __swig_getmethods__["queue"] = _flog_ofp_v1_0.Stats_res_payload_data_queue_get
    if _newclass:queue = _swig_property(_flog_ofp_v1_0.Stats_res_payload_data_queue_get, _flog_ofp_v1_0.Stats_res_payload_data_queue_set)
    __swig_setmethods__["vendor"] = _flog_ofp_v1_0.Stats_res_payload_data_vendor_set
    __swig_getmethods__["vendor"] = _flog_ofp_v1_0.Stats_res_payload_data_vendor_get
    if _newclass:vendor = _swig_property(_flog_ofp_v1_0.Stats_res_payload_data_vendor_get, _flog_ofp_v1_0.Stats_res_payload_data_vendor_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_res_payload_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_res_payload_data
    __del__ = lambda self : None;
Stats_res_payload_data_swigregister = _flog_ofp_v1_0.Stats_res_payload_data_swigregister
Stats_res_payload_data_swigregister(Stats_res_payload_data)

class Stats_res_payload(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_res_payload, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_res_payload, name)
    __repr__ = _swig_repr
    __swig_setmethods__["init"] = _flog_ofp_v1_0.Stats_res_payload_init_set
    __swig_getmethods__["init"] = _flog_ofp_v1_0.Stats_res_payload_init_get
    if _newclass:init = _swig_property(_flog_ofp_v1_0.Stats_res_payload_init_get, _flog_ofp_v1_0.Stats_res_payload_init_set)
    __swig_getmethods__["data"] = _flog_ofp_v1_0.Stats_res_payload_data_get
    if _newclass:data = _swig_property(_flog_ofp_v1_0.Stats_res_payload_data_get)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_res_payload()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_res_payload
    __del__ = lambda self : None;
Stats_res_payload_swigregister = _flog_ofp_v1_0.Stats_res_payload_swigregister
Stats_res_payload_swigregister(Stats_res_payload)

class Stats_res(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats_res, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stats_res, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _flog_ofp_v1_0.Stats_res_header_set
    __swig_getmethods__["header"] = _flog_ofp_v1_0.Stats_res_header_get
    if _newclass:header = _swig_property(_flog_ofp_v1_0.Stats_res_header_get, _flog_ofp_v1_0.Stats_res_header_set)
    __swig_getmethods__["payload"] = _flog_ofp_v1_0.Stats_res_payload_get
    if _newclass:payload = _swig_property(_flog_ofp_v1_0.Stats_res_payload_get)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Stats_res()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Stats_res
    __del__ = lambda self : None;
Stats_res_swigregister = _flog_ofp_v1_0.Stats_res_swigregister
Stats_res_swigregister(Stats_res)

class Barrier_req(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Barrier_req, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Barrier_req, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Barrier_req()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Barrier_req
    __del__ = lambda self : None;
Barrier_req_swigregister = _flog_ofp_v1_0.Barrier_req_swigregister
Barrier_req_swigregister(Barrier_req)

class Barrier_res(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Barrier_res, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Barrier_res, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Barrier_res()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Barrier_res
    __del__ = lambda self : None;
Barrier_res_swigregister = _flog_ofp_v1_0.Barrier_res_swigregister
Barrier_res_swigregister(Barrier_res)

class Queue_get_config_req(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Queue_get_config_req, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Queue_get_config_req, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port"] = _flog_ofp_v1_0.Queue_get_config_req_port_set
    __swig_getmethods__["port"] = _flog_ofp_v1_0.Queue_get_config_req_port_get
    if _newclass:port = _swig_property(_flog_ofp_v1_0.Queue_get_config_req_port_get, _flog_ofp_v1_0.Queue_get_config_req_port_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Queue_get_config_req()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Queue_get_config_req
    __del__ = lambda self : None;
Queue_get_config_req_swigregister = _flog_ofp_v1_0.Queue_get_config_req_swigregister
Queue_get_config_req_swigregister(Queue_get_config_req)

class Queue_get_config_res(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Queue_get_config_res, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Queue_get_config_res, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port"] = _flog_ofp_v1_0.Queue_get_config_res_port_set
    __swig_getmethods__["port"] = _flog_ofp_v1_0.Queue_get_config_res_port_get
    if _newclass:port = _swig_property(_flog_ofp_v1_0.Queue_get_config_res_port_get, _flog_ofp_v1_0.Queue_get_config_res_port_set)
    __swig_setmethods__["queues"] = _flog_ofp_v1_0.Queue_get_config_res_queues_set
    __swig_getmethods__["queues"] = _flog_ofp_v1_0.Queue_get_config_res_queues_get
    if _newclass:queues = _swig_property(_flog_ofp_v1_0.Queue_get_config_res_queues_get, _flog_ofp_v1_0.Queue_get_config_res_queues_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Queue_get_config_res()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Queue_get_config_res
    __del__ = lambda self : None;
Queue_get_config_res_swigregister = _flog_ofp_v1_0.Queue_get_config_res_swigregister
Queue_get_config_res_swigregister(Queue_get_config_res)

HELLO = _flog_ofp_v1_0.HELLO
ERROR = _flog_ofp_v1_0.ERROR
ECHO_REQ = _flog_ofp_v1_0.ECHO_REQ
ECHO_RES = _flog_ofp_v1_0.ECHO_RES
VENDOR = _flog_ofp_v1_0.VENDOR
FEATURE_REQ = _flog_ofp_v1_0.FEATURE_REQ
FEATURE_RES = _flog_ofp_v1_0.FEATURE_RES
GET_CONFIG_REQ = _flog_ofp_v1_0.GET_CONFIG_REQ
GET_CONFIG_RES = _flog_ofp_v1_0.GET_CONFIG_RES
SET_CONFIG = _flog_ofp_v1_0.SET_CONFIG
PACKET_IN = _flog_ofp_v1_0.PACKET_IN
FLOW_REMOVED = _flog_ofp_v1_0.FLOW_REMOVED
PORT_STATUS = _flog_ofp_v1_0.PORT_STATUS
PACKET_OUT = _flog_ofp_v1_0.PACKET_OUT
FLOW_MOD = _flog_ofp_v1_0.FLOW_MOD
PORT_MOD = _flog_ofp_v1_0.PORT_MOD
STATS_REQ = _flog_ofp_v1_0.STATS_REQ
STATS_RES = _flog_ofp_v1_0.STATS_RES
BARRIER_REQ = _flog_ofp_v1_0.BARRIER_REQ
BARRIER_RES = _flog_ofp_v1_0.BARRIER_RES
QUEUE_GET_CONFIG_REQ = _flog_ofp_v1_0.QUEUE_GET_CONFIG_REQ
QUEUE_GET_CONFIG_RES = _flog_ofp_v1_0.QUEUE_GET_CONFIG_RES
class Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _flog_ofp_v1_0.Header_version_set
    __swig_getmethods__["version"] = _flog_ofp_v1_0.Header_version_get
    if _newclass:version = _swig_property(_flog_ofp_v1_0.Header_version_get, _flog_ofp_v1_0.Header_version_set)
    __swig_setmethods__["type"] = _flog_ofp_v1_0.Header_type_set
    __swig_getmethods__["type"] = _flog_ofp_v1_0.Header_type_get
    if _newclass:type = _swig_property(_flog_ofp_v1_0.Header_type_get, _flog_ofp_v1_0.Header_type_set)
    __swig_setmethods__["length"] = _flog_ofp_v1_0.Header_length_set
    __swig_getmethods__["length"] = _flog_ofp_v1_0.Header_length_get
    if _newclass:length = _swig_property(_flog_ofp_v1_0.Header_length_get, _flog_ofp_v1_0.Header_length_set)
    __swig_setmethods__["xid"] = _flog_ofp_v1_0.Header_xid_set
    __swig_getmethods__["xid"] = _flog_ofp_v1_0.Header_xid_get
    if _newclass:xid = _swig_property(_flog_ofp_v1_0.Header_xid_get, _flog_ofp_v1_0.Header_xid_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Header
    __del__ = lambda self : None;
Header_swigregister = _flog_ofp_v1_0.Header_swigregister
Header_swigregister(Header)

class Payload_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Payload_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Payload_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hello"] = _flog_ofp_v1_0.Payload_data_hello_set
    __swig_getmethods__["hello"] = _flog_ofp_v1_0.Payload_data_hello_get
    if _newclass:hello = _swig_property(_flog_ofp_v1_0.Payload_data_hello_get, _flog_ofp_v1_0.Payload_data_hello_set)
    __swig_setmethods__["error"] = _flog_ofp_v1_0.Payload_data_error_set
    __swig_getmethods__["error"] = _flog_ofp_v1_0.Payload_data_error_get
    if _newclass:error = _swig_property(_flog_ofp_v1_0.Payload_data_error_get, _flog_ofp_v1_0.Payload_data_error_set)
    __swig_setmethods__["echo_req"] = _flog_ofp_v1_0.Payload_data_echo_req_set
    __swig_getmethods__["echo_req"] = _flog_ofp_v1_0.Payload_data_echo_req_get
    if _newclass:echo_req = _swig_property(_flog_ofp_v1_0.Payload_data_echo_req_get, _flog_ofp_v1_0.Payload_data_echo_req_set)
    __swig_setmethods__["echo_res"] = _flog_ofp_v1_0.Payload_data_echo_res_set
    __swig_getmethods__["echo_res"] = _flog_ofp_v1_0.Payload_data_echo_res_get
    if _newclass:echo_res = _swig_property(_flog_ofp_v1_0.Payload_data_echo_res_get, _flog_ofp_v1_0.Payload_data_echo_res_set)
    __swig_setmethods__["vendor"] = _flog_ofp_v1_0.Payload_data_vendor_set
    __swig_getmethods__["vendor"] = _flog_ofp_v1_0.Payload_data_vendor_get
    if _newclass:vendor = _swig_property(_flog_ofp_v1_0.Payload_data_vendor_get, _flog_ofp_v1_0.Payload_data_vendor_set)
    __swig_setmethods__["flow_mod"] = _flog_ofp_v1_0.Payload_data_flow_mod_set
    __swig_getmethods__["flow_mod"] = _flog_ofp_v1_0.Payload_data_flow_mod_get
    if _newclass:flow_mod = _swig_property(_flog_ofp_v1_0.Payload_data_flow_mod_get, _flog_ofp_v1_0.Payload_data_flow_mod_set)
    __swig_setmethods__["feature_req"] = _flog_ofp_v1_0.Payload_data_feature_req_set
    __swig_getmethods__["feature_req"] = _flog_ofp_v1_0.Payload_data_feature_req_get
    if _newclass:feature_req = _swig_property(_flog_ofp_v1_0.Payload_data_feature_req_get, _flog_ofp_v1_0.Payload_data_feature_req_set)
    __swig_setmethods__["feature_res"] = _flog_ofp_v1_0.Payload_data_feature_res_set
    __swig_getmethods__["feature_res"] = _flog_ofp_v1_0.Payload_data_feature_res_get
    if _newclass:feature_res = _swig_property(_flog_ofp_v1_0.Payload_data_feature_res_get, _flog_ofp_v1_0.Payload_data_feature_res_set)
    __swig_setmethods__["get_config_req"] = _flog_ofp_v1_0.Payload_data_get_config_req_set
    __swig_getmethods__["get_config_req"] = _flog_ofp_v1_0.Payload_data_get_config_req_get
    if _newclass:get_config_req = _swig_property(_flog_ofp_v1_0.Payload_data_get_config_req_get, _flog_ofp_v1_0.Payload_data_get_config_req_set)
    __swig_setmethods__["get_config_res"] = _flog_ofp_v1_0.Payload_data_get_config_res_set
    __swig_getmethods__["get_config_res"] = _flog_ofp_v1_0.Payload_data_get_config_res_get
    if _newclass:get_config_res = _swig_property(_flog_ofp_v1_0.Payload_data_get_config_res_get, _flog_ofp_v1_0.Payload_data_get_config_res_set)
    __swig_setmethods__["set_config"] = _flog_ofp_v1_0.Payload_data_set_config_set
    __swig_getmethods__["set_config"] = _flog_ofp_v1_0.Payload_data_set_config_get
    if _newclass:set_config = _swig_property(_flog_ofp_v1_0.Payload_data_set_config_get, _flog_ofp_v1_0.Payload_data_set_config_set)
    __swig_setmethods__["packet_in"] = _flog_ofp_v1_0.Payload_data_packet_in_set
    __swig_getmethods__["packet_in"] = _flog_ofp_v1_0.Payload_data_packet_in_get
    if _newclass:packet_in = _swig_property(_flog_ofp_v1_0.Payload_data_packet_in_get, _flog_ofp_v1_0.Payload_data_packet_in_set)
    __swig_setmethods__["flow_removed"] = _flog_ofp_v1_0.Payload_data_flow_removed_set
    __swig_getmethods__["flow_removed"] = _flog_ofp_v1_0.Payload_data_flow_removed_get
    if _newclass:flow_removed = _swig_property(_flog_ofp_v1_0.Payload_data_flow_removed_get, _flog_ofp_v1_0.Payload_data_flow_removed_set)
    __swig_setmethods__["port_status"] = _flog_ofp_v1_0.Payload_data_port_status_set
    __swig_getmethods__["port_status"] = _flog_ofp_v1_0.Payload_data_port_status_get
    if _newclass:port_status = _swig_property(_flog_ofp_v1_0.Payload_data_port_status_get, _flog_ofp_v1_0.Payload_data_port_status_set)
    __swig_setmethods__["packet_out"] = _flog_ofp_v1_0.Payload_data_packet_out_set
    __swig_getmethods__["packet_out"] = _flog_ofp_v1_0.Payload_data_packet_out_get
    if _newclass:packet_out = _swig_property(_flog_ofp_v1_0.Payload_data_packet_out_get, _flog_ofp_v1_0.Payload_data_packet_out_set)
    __swig_setmethods__["port_mod"] = _flog_ofp_v1_0.Payload_data_port_mod_set
    __swig_getmethods__["port_mod"] = _flog_ofp_v1_0.Payload_data_port_mod_get
    if _newclass:port_mod = _swig_property(_flog_ofp_v1_0.Payload_data_port_mod_get, _flog_ofp_v1_0.Payload_data_port_mod_set)
    __swig_setmethods__["stats_req"] = _flog_ofp_v1_0.Payload_data_stats_req_set
    __swig_getmethods__["stats_req"] = _flog_ofp_v1_0.Payload_data_stats_req_get
    if _newclass:stats_req = _swig_property(_flog_ofp_v1_0.Payload_data_stats_req_get, _flog_ofp_v1_0.Payload_data_stats_req_set)
    __swig_setmethods__["stats_res"] = _flog_ofp_v1_0.Payload_data_stats_res_set
    __swig_getmethods__["stats_res"] = _flog_ofp_v1_0.Payload_data_stats_res_get
    if _newclass:stats_res = _swig_property(_flog_ofp_v1_0.Payload_data_stats_res_get, _flog_ofp_v1_0.Payload_data_stats_res_set)
    __swig_setmethods__["barrier_req"] = _flog_ofp_v1_0.Payload_data_barrier_req_set
    __swig_getmethods__["barrier_req"] = _flog_ofp_v1_0.Payload_data_barrier_req_get
    if _newclass:barrier_req = _swig_property(_flog_ofp_v1_0.Payload_data_barrier_req_get, _flog_ofp_v1_0.Payload_data_barrier_req_set)
    __swig_setmethods__["barrier_res"] = _flog_ofp_v1_0.Payload_data_barrier_res_set
    __swig_getmethods__["barrier_res"] = _flog_ofp_v1_0.Payload_data_barrier_res_get
    if _newclass:barrier_res = _swig_property(_flog_ofp_v1_0.Payload_data_barrier_res_get, _flog_ofp_v1_0.Payload_data_barrier_res_set)
    __swig_setmethods__["queue_get_config_req"] = _flog_ofp_v1_0.Payload_data_queue_get_config_req_set
    __swig_getmethods__["queue_get_config_req"] = _flog_ofp_v1_0.Payload_data_queue_get_config_req_get
    if _newclass:queue_get_config_req = _swig_property(_flog_ofp_v1_0.Payload_data_queue_get_config_req_get, _flog_ofp_v1_0.Payload_data_queue_get_config_req_set)
    __swig_setmethods__["queue_get_config_res"] = _flog_ofp_v1_0.Payload_data_queue_get_config_res_set
    __swig_getmethods__["queue_get_config_res"] = _flog_ofp_v1_0.Payload_data_queue_get_config_res_get
    if _newclass:queue_get_config_res = _swig_property(_flog_ofp_v1_0.Payload_data_queue_get_config_res_get, _flog_ofp_v1_0.Payload_data_queue_get_config_res_set)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Payload_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Payload_data
    __del__ = lambda self : None;
Payload_data_swigregister = _flog_ofp_v1_0.Payload_data_swigregister
Payload_data_swigregister(Payload_data)

class Payload(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Payload, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Payload, name)
    __repr__ = _swig_repr
    __swig_setmethods__["init"] = _flog_ofp_v1_0.Payload_init_set
    __swig_getmethods__["init"] = _flog_ofp_v1_0.Payload_init_get
    if _newclass:init = _swig_property(_flog_ofp_v1_0.Payload_init_get, _flog_ofp_v1_0.Payload_init_set)
    __swig_getmethods__["data"] = _flog_ofp_v1_0.Payload_data_get
    if _newclass:data = _swig_property(_flog_ofp_v1_0.Payload_data_get)
    def __init__(self): 
        this = _flog_ofp_v1_0.new_Payload()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Payload
    __del__ = lambda self : None;
Payload_swigregister = _flog_ofp_v1_0.Payload_swigregister
Payload_swigregister(Payload)

class Message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _flog_ofp_v1_0.Message_header_set
    __swig_getmethods__["header"] = _flog_ofp_v1_0.Message_header_get
    if _newclass:header = _swig_property(_flog_ofp_v1_0.Message_header_get, _flog_ofp_v1_0.Message_header_set)
    __swig_getmethods__["payload"] = _flog_ofp_v1_0.Message_payload_get
    if _newclass:payload = _swig_property(_flog_ofp_v1_0.Message_payload_get)
    def __str__(self):
      f = Formatter()
      return to_string(self, f)

    def __init__(self): 
        this = _flog_ofp_v1_0.new_Message()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog_ofp_v1_0.delete_Message
    __del__ = lambda self : None;
Message_swigregister = _flog_ofp_v1_0.Message_swigregister
Message_swigregister(Message)


def bytes(*args):
  return _flog_ofp_v1_0.bytes(*args)
bytes = _flog_ofp_v1_0.bytes

def is_valid(*args):
  return _flog_ofp_v1_0.is_valid(*args)
is_valid = _flog_ofp_v1_0.is_valid

def from_buffer(*args):
  return _flog_ofp_v1_0.from_buffer(*args)
from_buffer = _flog_ofp_v1_0.from_buffer

def to_buffer(*args):
  return _flog_ofp_v1_0.to_buffer(*args)
to_buffer = _flog_ofp_v1_0.to_buffer

def to_string(*args):
  return _flog_ofp_v1_0.to_string(*args)
to_string = _flog_ofp_v1_0.to_string
# This file is compatible with both classic and new-style classes.


