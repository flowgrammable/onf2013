# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_flog', [dirname(__file__)])
        except ImportError:
            import _flog
            return _flog
        if fp is not None:
            try:
                _mod = imp.load_module('_flog', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _flog = swig_import_helper()
    del swig_import_helper
else:
    import _flog
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Buffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Buffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _flog.new_Buffer(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return _flog.Buffer_size(self)
    def __len__(self): return _flog.Buffer___len__(self)
    def __getitem__(self, *args): return _flog.Buffer___getitem__(self, *args)
    __swig_destroy__ = _flog.delete_Buffer
    __del__ = lambda self : None;
Buffer_swigregister = _flog.Buffer_swigregister
Buffer_swigregister(Buffer)

class Greedy_buffer(Buffer):
    __swig_setmethods__ = {}
    for _s in [Buffer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Greedy_buffer, name, value)
    __swig_getmethods__ = {}
    for _s in [Buffer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Greedy_buffer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flog.new_Greedy_buffer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog.delete_Greedy_buffer
    __del__ = lambda self : None;
Greedy_buffer_swigregister = _flog.Greedy_buffer_swigregister
Greedy_buffer_swigregister(Greedy_buffer)


def buffer_from_file(*args):
  return _flog.buffer_from_file(*args)
buffer_from_file = _flog.buffer_from_file

def buffer_to_file(*args):
  return _flog.buffer_to_file(*args)
buffer_to_file = _flog.buffer_to_file
class Buffer_view(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Buffer_view, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Buffer_view, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _flog.new_Buffer_view(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog.delete_Buffer_view
    __del__ = lambda self : None;
Buffer_view_swigregister = _flog.Buffer_view_swigregister
Buffer_view_swigregister(Buffer_view)

class Formatter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Formatter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Formatter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _flog.new_Formatter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flog.delete_Formatter
    __del__ = lambda self : None;
Formatter_swigregister = _flog.Formatter_swigregister
Formatter_swigregister(Formatter)

# This file is compatible with both classic and new-style classes.


